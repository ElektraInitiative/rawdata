<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1174.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1157" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="1157" > </text>
<g id="frames">
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (7,689,904 samples, 0.05%)</title><rect x="1070.6" y="997" width="0.6" height="15.0" fill="rgb(246,194,19)" rx="2" ry="2" />
<text  x="1073.60" y="1007.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (5,218,078,067 samples, 32.72%)</title><rect x="481.2" y="1013" width="386.0" height="15.0" fill="rgb(242,185,34)" rx="2" ry="2" />
<text  x="484.18" y="1023.5" >(anonymous namespace)::executeListenerMethods(yawn::..</text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (1,655,683 samples, 0.01%)</title><rect x="1118.8" y="981" width="0.1" height="15.0" fill="rgb(251,120,21)" rx="2" ry="2" />
<text  x="1121.79" y="991.5" ></text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (3,999,928 samples, 0.03%)</title><rect x="865.1" y="565" width="0.2" height="15.0" fill="rgb(251,78,47)" rx="2" ry="2" />
<text  x="868.05" y="575.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,260,213,405 samples, 14.17%)</title><rect x="696.9" y="501" width="167.2" height="15.0" fill="rgb(207,156,15)" rx="2" ry="2" />
<text  x="699.91" y="511.5" >(anonymous namespace)..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,441,107,500 samples, 27.85%)</title><rect x="538.4" y="885" width="328.6" height="15.0" fill="rgb(211,89,45)" rx="2" ry="2" />
<text  x="541.41" y="895.5" >(anonymous namespace)::executeListenerMethod..</text>
</g>
<g >
<title>yawn::Lexer::scanToNextToken() (196,745,732 samples, 1.23%)</title><rect x="1028.1" y="1013" width="14.5" height="15.0" fill="rgb(213,204,27)" rx="2" ry="2" />
<text  x="1031.09" y="1023.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,152,940,056 samples, 26.04%)</title><rect x="559.5" y="837" width="307.2" height="15.0" fill="rgb(251,204,11)" rx="2" ry="2" />
<text  x="562.50" y="847.5" >(anonymous namespace)::executeListenerMet..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (921,072,989 samples, 5.78%)</title><rect x="794.5" y="229" width="68.2" height="15.0" fill="rgb(217,120,17)" rx="2" ry="2" />
<text  x="797.52" y="239.5" >(anonym..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (201,157,067 samples, 1.26%)</title><rect x="846.5" y="69" width="14.9" height="15.0" fill="rgb(239,4,35)" rx="2" ry="2" />
<text  x="849.50" y="79.5" ></text>
</g>
<g >
<title>keyVNew (2,798,188 samples, 0.02%)</title><rect x="864.6" y="517" width="0.2" height="15.0" fill="rgb(242,131,4)" rx="2" ry="2" />
<text  x="867.63" y="527.5" ></text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (5,458,494 samples, 0.03%)</title><rect x="861.6" y="133" width="0.4" height="15.0" fill="rgb(254,172,35)" rx="2" ry="2" />
<text  x="864.64" y="143.5" ></text>
</g>
<g >
<title>yawn::Listener::getKeySet() const (29,028,172 samples, 0.18%)</title><rect x="1186.2" y="1045" width="2.1" height="15.0" fill="rgb(216,95,4)" rx="2" ry="2" />
<text  x="1189.17" y="1055.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,538,265,811 samples, 28.45%)</title><rect x="531.3" y="901" width="335.8" height="15.0" fill="rgb(219,183,1)" rx="2" ry="2" />
<text  x="534.30" y="911.5" >(anonymous namespace)::executeListenerMethods..</text>
</g>
<g >
<title>elektraKeySetName (1,988,760 samples, 0.01%)</title><rect x="865.2" y="517" width="0.1" height="15.0" fill="rgb(217,136,3)" rx="2" ry="2" />
<text  x="868.20" y="527.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,133,800,445 samples, 19.65%)</title><rect x="633.9" y="661" width="231.8" height="15.0" fill="rgb(206,173,54)" rx="2" ry="2" />
<text  x="636.86" y="671.5" >(anonymous namespace)::execute..</text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (4,510,650 samples, 0.03%)</title><rect x="861.7" y="117" width="0.3" height="15.0" fill="rgb(221,188,33)" rx="2" ry="2" />
<text  x="864.71" y="127.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,536,017,756 samples, 9.63%)</title><rect x="749.7" y="357" width="113.6" height="15.0" fill="rgb(222,60,17)" rx="2" ry="2" />
<text  x="752.67" y="367.5" >(anonymous nam..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,635,554,324 samples, 29.06%)</title><rect x="524.2" y="917" width="342.9" height="15.0" fill="rgb(247,138,22)" rx="2" ry="2" />
<text  x="527.17" y="927.5" >(anonymous namespace)::executeListenerMethods(..</text>
</g>
<g >
<title>main (15,949,185,753 samples, 100.00%)</title><rect x="10.0" y="1093" width="1180.0" height="15.0" fill="rgb(224,42,20)" rx="2" ry="2" />
<text  x="13.00" y="1103.5" >main</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (5,121,091,500 samples, 32.11%)</title><rect x="488.4" y="997" width="378.8" height="15.0" fill="rgb(236,107,48)" rx="2" ry="2" />
<text  x="491.35" y="1007.5" >(anonymous namespace)::executeListenerMethods(yawn:..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,779,666,570 samples, 17.43%)</title><rect x="659.7" y="597" width="205.7" height="15.0" fill="rgb(254,205,36)" rx="2" ry="2" />
<text  x="662.70" y="607.5" >(anonymous namespace)::exec..</text>
</g>
<g >
<title>yawn::Lexer::scanValue() (153,547,578 samples, 0.96%)</title><rect x="1174.8" y="1029" width="11.3" height="15.0" fill="rgb(215,3,4)" rx="2" ry="2" />
<text  x="1177.76" y="1039.5" ></text>
</g>
<g >
<title>yawn::Input::getText[abi:cxx11](unsigned long) const (29,850,648 samples, 0.19%)</title><rect x="1183.9" y="1013" width="2.2" height="15.0" fill="rgb(252,96,11)" rx="2" ry="2" />
<text  x="1186.86" y="1023.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,688,686,843 samples, 16.86%)</title><rect x="666.1" y="581" width="198.9" height="15.0" fill="rgb(220,48,37)" rx="2" ry="2" />
<text  x="669.07" y="591.5" >(anonymous namespace)::exe..</text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,686,538 samples, 0.01%)</title><rect x="864.8" y="565" width="0.2" height="15.0" fill="rgb(229,166,45)" rx="2" ry="2" />
<text  x="867.85" y="575.5" ></text>
</g>
<g >
<title>yawn::Input::Input(std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;) (15,289,824 samples, 0.10%)</title><rect x="869.9" y="1029" width="1.1" height="15.0" fill="rgb(220,214,13)" rx="2" ry="2" />
<text  x="872.92" y="1039.5" ></text>
</g>
<g >
<title>yawn::Lexer::addSimpleKeyCandidate() (3,296,597 samples, 0.02%)</title><rect x="1118.9" y="1013" width="0.3" height="15.0" fill="rgb(228,65,36)" rx="2" ry="2" />
<text  x="1121.93" y="1023.5" ></text>
</g>
<g >
<title>std::deque&lt;std::unique_ptr&lt;yawn::Token, std::default_delete&lt;yawn::Token&gt; &gt;, std::allocator&lt;std::unique_ptr&lt;yawn::Token, std::default_delete&lt;yawn::Token&gt; &gt; &gt; &gt;::~deque() (2,616,697 samples, 0.02%)</title><rect x="869.2" y="1045" width="0.2" height="15.0" fill="rgb(237,168,41)" rx="2" ry="2" />
<text  x="872.19" y="1055.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,178,006,615 samples, 13.66%)</title><rect x="702.9" y="485" width="161.2" height="15.0" fill="rgb(208,115,11)" rx="2" ry="2" />
<text  x="705.92" y="495.5" >(anonymous namespace..</text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (2,221,390 samples, 0.01%)</title><rect x="863.9" y="469" width="0.2" height="15.0" fill="rgb(214,212,46)" rx="2" ry="2" />
<text  x="866.89" y="479.5" ></text>
</g>
<g >
<title>yawn::Lexer::getText[abi:cxx11]() (6,263,088 samples, 0.04%)</title><rect x="871.1" y="1045" width="0.4" height="15.0" fill="rgb(213,109,32)" rx="2" ry="2" />
<text  x="874.06" y="1055.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,962,231,866 samples, 24.84%)</title><rect x="573.4" y="805" width="293.1" height="15.0" fill="rgb(250,7,46)" rx="2" ry="2" />
<text  x="576.37" y="815.5" >(anonymous namespace)::executeListenerM..</text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (3,592,368 samples, 0.02%)</title><rect x="864.6" y="533" width="0.2" height="15.0" fill="rgb(239,43,18)" rx="2" ry="2" />
<text  x="867.57" y="543.5" ></text>
</g>
<g >
<title>thread_144 (15,949,277,468 samples, 100.00%)</title><rect x="10.0" y="1109" width="1180.0" height="15.0" fill="rgb(235,120,24)" rx="2" ry="2" />
<text  x="13.00" y="1119.5" >thread_144</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,732,698,205 samples, 29.67%)</title><rect x="517.0" y="933" width="350.2" height="15.0" fill="rgb(241,139,43)" rx="2" ry="2" />
<text  x="520.03" y="943.5" >(anonymous namespace)::executeListenerMethods(y..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,927,012,621 samples, 30.89%)</title><rect x="502.7" y="965" width="364.5" height="15.0" fill="rgb(235,123,40)" rx="2" ry="2" />
<text  x="505.70" y="975.5" >(anonymous namespace)::executeListenerMethods(yaw..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (5,024,032,445 samples, 31.50%)</title><rect x="495.5" y="981" width="371.7" height="15.0" fill="rgb(211,108,25)" rx="2" ry="2" />
<text  x="498.53" y="991.5" >(anonymous namespace)::executeListenerMethods(yawn..</text>
</g>
<g >
<title>yawn::Lexer::scanSingleQuotedScalar() (408,927,319 samples, 2.56%)</title><rect x="1144.5" y="1029" width="30.3" height="15.0" fill="rgb(231,73,45)" rx="2" ry="2" />
<text  x="1147.50" y="1039.5" >ya..</text>
</g>
<g >
<title>ksClose (10,662,357 samples, 0.07%)</title><rect x="1189.2" y="1061" width="0.8" height="15.0" fill="rgb(213,116,47)" rx="2" ry="2" />
<text  x="1192.20" y="1071.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (4,907,033 samples, 0.03%)</title><rect x="1174.2" y="981" width="0.3" height="15.0" fill="rgb(236,101,35)" rx="2" ry="2" />
<text  x="1177.18" y="991.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,248,132,847 samples, 26.64%)</title><rect x="552.5" y="853" width="314.3" height="15.0" fill="rgb(229,58,16)" rx="2" ry="2" />
<text  x="555.51" y="863.5" >(anonymous namespace)::executeListenerMeth..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,427,869,000 samples, 15.22%)</title><rect x="684.7" y="533" width="179.7" height="15.0" fill="rgb(211,172,27)" rx="2" ry="2" />
<text  x="687.75" y="543.5" >(anonymous namespace)::..</text>
</g>
<g >
<title>ksDup (15,379,728 samples, 0.10%)</title><rect x="1187.2" y="1029" width="1.1" height="15.0" fill="rgb(245,26,30)" rx="2" ry="2" />
<text  x="1190.18" y="1039.5" ></text>
</g>
<g >
<title>yawn::Input::LA(unsigned long) const (8,987,412 samples, 0.06%)</title><rect x="1143.8" y="997" width="0.7" height="15.0" fill="rgb(249,192,15)" rx="2" ry="2" />
<text  x="1146.83" y="1007.5" ></text>
</g>
<g >
<title>yawn::Input::LA(unsigned long) const (6,184,929 samples, 0.04%)</title><rect x="1183.4" y="1013" width="0.4" height="15.0" fill="rgb(252,40,15)" rx="2" ry="2" />
<text  x="1186.39" y="1023.5" ></text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,401,168 samples, 0.01%)</title><rect x="866.5" y="805" width="0.1" height="15.0" fill="rgb(219,109,21)" rx="2" ry="2" />
<text  x="869.51" y="815.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,380,017,110 samples, 8.65%)</title><rect x="761.1" y="325" width="102.1" height="15.0" fill="rgb(232,113,44)" rx="2" ry="2" />
<text  x="764.07" y="335.5" >(anonymous n..</text>
</g>
<g >
<title>ksDel (18,287,619 samples, 0.11%)</title><rect x="867.8" y="1045" width="1.4" height="15.0" fill="rgb(242,72,0)" rx="2" ry="2" />
<text  x="870.83" y="1055.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (9,907,305 samples, 0.06%)</title><rect x="1173.8" y="997" width="0.7" height="15.0" fill="rgb(247,74,14)" rx="2" ry="2" />
<text  x="1176.81" y="1007.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (624,093,256 samples, 3.91%)</title><rect x="816.0" y="165" width="46.2" height="15.0" fill="rgb(235,52,52)" rx="2" ry="2" />
<text  x="819.04" y="175.5" >(ano..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,590,312,632 samples, 22.51%)</title><rect x="600.6" y="741" width="265.6" height="15.0" fill="rgb(237,229,31)" rx="2" ry="2" />
<text  x="603.61" y="751.5" >(anonymous namespace)::executeListe..</text>
</g>
<g >
<title>yawn::Input::index() const (3,576,815 samples, 0.02%)</title><rect x="1071.2" y="1013" width="0.2" height="15.0" fill="rgb(251,216,34)" rx="2" ry="2" />
<text  x="1074.18" y="1023.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,692,722,639 samples, 10.61%)</title><rect x="738.2" y="389" width="125.2" height="15.0" fill="rgb(245,188,2)" rx="2" ry="2" />
<text  x="741.18" y="399.5" >(anonymous name..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,225,805,668 samples, 7.69%)</title><rect x="772.4" y="293" width="90.7" height="15.0" fill="rgb(237,207,53)" rx="2" ry="2" />
<text  x="775.37" y="303.5" >(anonymous..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,851,737,640 samples, 11.61%)</title><rect x="726.6" y="421" width="137.0" height="15.0" fill="rgb(213,82,8)" rx="2" ry="2" />
<text  x="729.58" y="431.5" >(anonymous namesp..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,406,005,513 samples, 21.36%)</title><rect x="614.0" y="709" width="252.0" height="15.0" fill="rgb(246,167,32)" rx="2" ry="2" />
<text  x="617.04" y="719.5" >(anonymous namespace)::executeLis..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,094,770,551 samples, 13.13%)</title><rect x="708.9" y="469" width="155.0" height="15.0" fill="rgb(220,21,37)" rx="2" ry="2" />
<text  x="711.91" y="479.5" >(anonymous namespac..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,867,314,156 samples, 17.98%)</title><rect x="653.3" y="613" width="212.1" height="15.0" fill="rgb(222,181,10)" rx="2" ry="2" />
<text  x="656.30" y="623.5" >(anonymous namespace)::exec..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (268,783,869 samples, 1.69%)</title><rect x="841.5" y="85" width="19.9" height="15.0" fill="rgb(249,57,6)" rx="2" ry="2" />
<text  x="844.53" y="95.5" ></text>
</g>
<g >
<title>yawn::Input::LA(unsigned long) const (4,277,410 samples, 0.03%)</title><rect x="1042.3" y="997" width="0.3" height="15.0" fill="rgb(238,73,0)" rx="2" ry="2" />
<text  x="1045.25" y="1007.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (476,149,854 samples, 2.99%)</title><rect x="826.4" y="133" width="35.2" height="15.0" fill="rgb(234,48,1)" rx="2" ry="2" />
<text  x="829.42" y="143.5" >(a..</text>
</g>
<g >
<title>yawn::Input::toString[abi:cxx11]() const (4,694,536 samples, 0.03%)</title><rect x="871.2" y="1029" width="0.3" height="15.0" fill="rgb(242,192,18)" rx="2" ry="2" />
<text  x="874.17" y="1039.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,343,988,019 samples, 14.70%)</title><rect x="690.8" y="517" width="173.5" height="15.0" fill="rgb(216,142,12)" rx="2" ry="2" />
<text  x="693.85" y="527.5" >(anonymous namespace):..</text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,427,783 samples, 0.01%)</title><rect x="862.5" y="197" width="0.1" height="15.0" fill="rgb(209,92,9)" rx="2" ry="2" />
<text  x="865.47" y="207.5" ></text>
</g>
<g >
<title>keyVInit (2,943,085 samples, 0.02%)</title><rect x="861.8" y="85" width="0.2" height="15.0" fill="rgb(211,91,43)" rx="2" ry="2" />
<text  x="864.83" y="95.5" ></text>
</g>
<g >
<title>ksClose (9,174,149 samples, 0.06%)</title><rect x="868.5" y="1029" width="0.7" height="15.0" fill="rgb(244,89,6)" rx="2" ry="2" />
<text  x="871.51" y="1039.5" ></text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,381,709 samples, 0.01%)</title><rect x="865.4" y="613" width="0.1" height="15.0" fill="rgb(215,158,53)" rx="2" ry="2" />
<text  x="868.44" y="623.5" ></text>
</g>
<g >
<title>yawn::Lexer::scanPlainScalar() (986,935,774 samples, 6.19%)</title><rect x="1071.5" y="1029" width="73.0" height="15.0" fill="rgb(253,88,17)" rx="2" ry="2" />
<text  x="1074.48" y="1039.5" >yawn::Le..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,457,997,306 samples, 9.14%)</title><rect x="755.4" y="341" width="107.8" height="15.0" fill="rgb(220,91,52)" rx="2" ry="2" />
<text  x="758.38" y="351.5" >(anonymous na..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,601,703,401 samples, 16.31%)</title><rect x="672.4" y="565" width="192.4" height="15.0" fill="rgb(232,10,27)" rx="2" ry="2" />
<text  x="675.36" y="575.5" >(anonymous namespace)::ex..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,774,985,178 samples, 23.67%)</title><rect x="587.1" y="773" width="279.3" height="15.0" fill="rgb(218,143,27)" rx="2" ry="2" />
<text  x="590.07" y="783.5" >(anonymous namespace)::executeListene..</text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,901,920 samples, 0.01%)</title><rect x="862.1" y="149" width="0.1" height="15.0" fill="rgb(249,151,43)" rx="2" ry="2" />
<text  x="865.06" y="159.5" ></text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,610,972 samples, 0.01%)</title><rect x="864.4" y="533" width="0.1" height="15.0" fill="rgb(251,199,34)" rx="2" ry="2" />
<text  x="867.37" y="543.5" ></text>
</g>
<g >
<title>yawn::Input::index() const (2,395,003 samples, 0.02%)</title><rect x="1174.6" y="1013" width="0.1" height="15.0" fill="rgb(219,57,5)" rx="2" ry="2" />
<text  x="1177.55" y="1023.5" ></text>
</g>
<g >
<title>yawn::Input::getText[abi:cxx11](unsigned long) const (6,158,764 samples, 0.04%)</title><rect x="1118.5" y="1013" width="0.4" height="15.0" fill="rgb(241,21,6)" rx="2" ry="2" />
<text  x="1121.47" y="1023.5" ></text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (1,532,592 samples, 0.01%)</title><rect x="863.9" y="453" width="0.2" height="15.0" fill="rgb(219,22,27)" rx="2" ry="2" />
<text  x="866.94" y="463.5" ></text>
</g>
<g >
<title>yawn::Input::getText[abi:cxx11](unsigned long) const (12,348,992 samples, 0.08%)</title><rect x="1070.3" y="1013" width="0.9" height="15.0" fill="rgb(217,107,24)" rx="2" ry="2" />
<text  x="1073.26" y="1023.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,512,749,622 samples, 15.75%)</title><rect x="678.6" y="549" width="185.9" height="15.0" fill="rgb(248,105,54)" rx="2" ry="2" />
<text  x="681.60" y="559.5" >(anonymous namespace)::e..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (697,987,341 samples, 4.38%)</title><rect x="810.7" y="181" width="51.7" height="15.0" fill="rgb(221,168,24)" rx="2" ry="2" />
<text  x="813.72" y="191.5" >(anon..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,344,587,287 samples, 27.24%)</title><rect x="545.5" y="869" width="321.4" height="15.0" fill="rgb(247,116,54)" rx="2" ry="2" />
<text  x="548.47" y="879.5" >(anonymous namespace)::executeListenerMetho..</text>
</g>
<g >
<title>yawn::Lexer::countPlainNonSpace(unsigned long) const (342,330,691 samples, 2.15%)</title><rect x="1119.2" y="1013" width="25.3" height="15.0" fill="rgb(249,85,42)" rx="2" ry="2" />
<text  x="1122.17" y="1023.5" >y..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (551,596,259 samples, 3.46%)</title><rect x="821.3" y="149" width="40.8" height="15.0" fill="rgb(252,39,17)" rx="2" ry="2" />
<text  x="824.26" y="159.5" >(an..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (771,907,506 samples, 4.84%)</title><rect x="805.4" y="197" width="57.1" height="15.0" fill="rgb(250,215,7)" rx="2" ry="2" />
<text  x="808.36" y="207.5" >(anony..</text>
</g>
<g >
<title>yawn::Lexer::nextToken(void**) (4,252,912,528 samples, 26.67%)</title><rect x="871.5" y="1045" width="314.7" height="15.0" fill="rgb(224,228,12)" rx="2" ry="2" />
<text  x="874.52" y="1055.5" >yawn::Lexer::nextToken(void**)</text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (3,426,314 samples, 0.02%)</title><rect x="1118.7" y="997" width="0.2" height="15.0" fill="rgb(223,191,54)" rx="2" ry="2" />
<text  x="1121.66" y="1007.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,057,286,930 samples, 25.44%)</title><rect x="566.5" y="821" width="300.1" height="15.0" fill="rgb(210,66,44)" rx="2" ry="2" />
<text  x="569.45" y="831.5" >(anonymous namespace)::executeListenerMe..</text>
</g>
<g >
<title>keyNew (1,869,628 samples, 0.01%)</title><rect x="1188.3" y="1077" width="0.2" height="15.0" fill="rgb(210,191,52)" rx="2" ry="2" />
<text  x="1191.32" y="1087.5" ></text>
</g>
<g >
<title>yawn::Input::consume() (2,300,215 samples, 0.01%)</title><rect x="1118.3" y="1013" width="0.2" height="15.0" fill="rgb(214,11,53)" rx="2" ry="2" />
<text  x="1121.29" y="1023.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (5,315,244,818 samples, 33.33%)</title><rect x="474.0" y="1029" width="393.2" height="15.0" fill="rgb(226,194,43)" rx="2" ry="2" />
<text  x="477.00" y="1039.5" >(anonymous namespace)::executeListenerMethods(yawn::L..</text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (1,397,364 samples, 0.01%)</title><rect x="862.1" y="133" width="0.1" height="15.0" fill="rgb(223,127,9)" rx="2" ry="2" />
<text  x="865.10" y="143.5" ></text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (4,529,095 samples, 0.03%)</title><rect x="864.5" y="549" width="0.3" height="15.0" fill="rgb(237,219,46)" rx="2" ry="2" />
<text  x="867.50" y="559.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (846,530,642 samples, 5.31%)</title><rect x="800.0" y="213" width="62.6" height="15.0" fill="rgb(251,140,47)" rx="2" ry="2" />
<text  x="802.96" y="223.5" >(anony..</text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (3,855,976 samples, 0.02%)</title><rect x="1070.9" y="981" width="0.3" height="15.0" fill="rgb(242,68,4)" rx="2" ry="2" />
<text  x="1073.88" y="991.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (3,127,249 samples, 0.02%)</title><rect x="871.3" y="1013" width="0.2" height="15.0" fill="rgb(251,28,53)" rx="2" ry="2" />
<text  x="874.29" y="1023.5" ></text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (1,526,010 samples, 0.01%)</title><rect x="863.7" y="421" width="0.1" height="15.0" fill="rgb(253,44,28)" rx="2" ry="2" />
<text  x="866.72" y="431.5" ></text>
</g>
<g >
<title>yawn::Lexer::Lexer(std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;) (22,550,952 samples, 0.14%)</title><rect x="869.4" y="1045" width="1.7" height="15.0" fill="rgb(205,15,23)" rx="2" ry="2" />
<text  x="872.39" y="1055.5" ></text>
</g>
<g >
<title>ksAppendKey (1,505,449 samples, 0.01%)</title><rect x="1188.2" y="1013" width="0.1" height="15.0" fill="rgb(251,202,25)" rx="2" ry="2" />
<text  x="1191.19" y="1023.5" ></text>
</g>
<g >
<title>keyVNew (3,712,691 samples, 0.02%)</title><rect x="861.8" y="101" width="0.2" height="15.0" fill="rgb(223,216,34)" rx="2" ry="2" />
<text  x="864.77" y="111.5" ></text>
</g>
<g >
<title>ksAppend (6,656,508 samples, 0.04%)</title><rect x="867.3" y="1045" width="0.5" height="15.0" fill="rgb(229,78,28)" rx="2" ry="2" />
<text  x="870.34" y="1055.5" ></text>
</g>
<g >
<title>keyVInit (2,629,937 samples, 0.02%)</title><rect x="865.2" y="533" width="0.1" height="15.0" fill="rgb(223,138,6)" rx="2" ry="2" />
<text  x="868.15" y="543.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,682,108,926 samples, 23.09%)</title><rect x="593.9" y="757" width="272.4" height="15.0" fill="rgb(237,107,32)" rx="2" ry="2" />
<text  x="596.86" y="767.5" >(anonymous namespace)::executeListen..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,772,010,196 samples, 11.11%)</title><rect x="732.4" y="405" width="131.1" height="15.0" fill="rgb(214,63,7)" rx="2" ry="2" />
<text  x="735.40" y="415.5" >(anonymous names..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (5,412,283,529 samples, 33.93%)</title><rect x="466.8" y="1045" width="400.4" height="15.0" fill="rgb(225,94,38)" rx="2" ry="2" />
<text  x="469.82" y="1055.5" >(anonymous namespace)::executeListenerMethods(yawn::Li..</text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,543,562 samples, 0.01%)</title><rect x="864.1" y="501" width="0.1" height="15.0" fill="rgb(252,103,27)" rx="2" ry="2" />
<text  x="867.14" y="511.5" ></text>
</g>
<g >
<title>yawn::Input::consume() (2,590,346 samples, 0.02%)</title><rect x="1173.2" y="1013" width="0.2" height="15.0" fill="rgb(211,58,44)" rx="2" ry="2" />
<text  x="1176.17" y="1023.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,072,689,555 samples, 6.73%)</title><rect x="783.5" y="261" width="79.4" height="15.0" fill="rgb(206,180,49)" rx="2" ry="2" />
<text  x="786.52" y="271.5" >(anonymou..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,931,943,944 samples, 12.11%)</title><rect x="720.7" y="437" width="143.0" height="15.0" fill="rgb(254,172,19)" rx="2" ry="2" />
<text  x="723.73" y="447.5" >(anonymous namespa..</text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (4,813,045 samples, 0.03%)</title><rect x="865.0" y="581" width="0.3" height="15.0" fill="rgb(245,119,5)" rx="2" ry="2" />
<text  x="867.99" y="591.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,614,264,811 samples, 10.12%)</title><rect x="743.9" y="373" width="119.5" height="15.0" fill="rgb(251,68,7)" rx="2" ry="2" />
<text  x="746.93" y="383.5" >(anonymous nam..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,302,609,968 samples, 8.17%)</title><rect x="766.7" y="309" width="96.4" height="15.0" fill="rgb(245,147,31)" rx="2" ry="2" />
<text  x="769.73" y="319.5" >(anonymous ..</text>
</g>
<g >
<title>yawn::Input::consume() (2,892,180 samples, 0.02%)</title><rect x="1070.1" y="1013" width="0.2" height="15.0" fill="rgb(226,120,17)" rx="2" ry="2" />
<text  x="1073.05" y="1023.5" ></text>
</g>
<g >
<title>elektraKeySetName (2,215,479 samples, 0.01%)</title><rect x="861.9" y="69" width="0.1" height="15.0" fill="rgb(212,84,32)" rx="2" ry="2" />
<text  x="864.88" y="79.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (18,875,425 samples, 0.12%)</title><rect x="1184.7" y="997" width="1.4" height="15.0" fill="rgb(229,132,4)" rx="2" ry="2" />
<text  x="1187.66" y="1007.5" ></text>
</g>
<g >
<title>keySetOwner (1,351,988 samples, 0.01%)</title><rect x="861.9" y="53" width="0.1" height="15.0" fill="rgb(245,23,45)" rx="2" ry="2" />
<text  x="864.95" y="63.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (66,964,531 samples, 0.42%)</title><rect x="856.4" y="37" width="4.9" height="15.0" fill="rgb(210,98,17)" rx="2" ry="2" />
<text  x="859.39" y="47.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,497,837,057 samples, 21.93%)</title><rect x="607.3" y="725" width="258.8" height="15.0" fill="rgb(241,224,53)" rx="2" ry="2" />
<text  x="610.35" y="735.5" >(anonymous namespace)::executeList..</text>
</g>
<g >
<title>yawn::Input::getText[abi:cxx11](unsigned long) const (16,084,656 samples, 0.10%)</title><rect x="1173.4" y="1013" width="1.2" height="15.0" fill="rgb(251,191,27)" rx="2" ry="2" />
<text  x="1176.36" y="1023.5" ></text>
</g>
<g >
<title>all (15,949,277,468 samples, 100%)</title><rect x="10.0" y="1125" width="1180.0" height="15.0" fill="rgb(221,8,13)" rx="2" ry="2" />
<text  x="13.00" y="1135.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::from_bytes(char const*, char const*) (8,226,040 samples, 0.05%)</title><rect x="870.4" y="1013" width="0.6" height="15.0" fill="rgb(226,157,48)" rx="2" ry="2" />
<text  x="873.44" y="1023.5" ></text>
</g>
<g >
<title>yawn::Lexer::addBlockEnd(unsigned long) (9,889,860 samples, 0.06%)</title><rect x="1027.4" y="1013" width="0.7" height="15.0" fill="rgb(252,77,5)" rx="2" ry="2" />
<text  x="1030.36" y="1023.5" ></text>
</g>
<g >
<title>yawn::Input::LA(unsigned long) const (2,053,359 samples, 0.01%)</title><rect x="1027.2" y="1013" width="0.2" height="15.0" fill="rgb(215,34,30)" rx="2" ry="2" />
<text  x="1030.21" y="1023.5" ></text>
</g>
<g >
<title>keyVNew (3,303,268 samples, 0.02%)</title><rect x="865.1" y="549" width="0.2" height="15.0" fill="rgb(218,134,39)" rx="2" ry="2" />
<text  x="868.10" y="559.5" ></text>
</g>
<g >
<title>yawn::Input::LA(unsigned long) const (8,756,542 samples, 0.05%)</title><rect x="1172.5" y="1013" width="0.7" height="15.0" fill="rgb(252,13,43)" rx="2" ry="2" />
<text  x="1175.52" y="1023.5" ></text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,629,180 samples, 0.01%)</title><rect x="865.9" y="693" width="0.1" height="15.0" fill="rgb(230,37,51)" rx="2" ry="2" />
<text  x="868.89" y="703.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (133,884,068 samples, 0.84%)</title><rect x="851.5" y="53" width="9.9" height="15.0" fill="rgb(246,183,29)" rx="2" ry="2" />
<text  x="854.46" y="63.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,955,744,357 samples, 18.53%)</title><rect x="646.9" y="629" width="218.6" height="15.0" fill="rgb(238,188,34)" rx="2" ry="2" />
<text  x="649.87" y="639.5" >(anonymous namespace)::execu..</text>
</g>
<g >
<title>yawn::addToKeySet(kdb::KeySet&amp;, kdb::Key&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (11,806,202,681 samples, 74.02%)</title><rect x="314.8" y="1061" width="873.5" height="15.0" fill="rgb(230,214,28)" rx="2" ry="2" />
<text  x="317.84" y="1071.5" >yawn::addToKeySet(kdb::KeySet&amp;, kdb::Key&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; ..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (406,328,884 samples, 2.55%)</title><rect x="831.5" y="117" width="30.1" height="15.0" fill="rgb(252,211,23)" rx="2" ry="2" />
<text  x="834.49" y="127.5" >(a..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (4,829,744,578 samples, 30.28%)</title><rect x="509.9" y="949" width="357.3" height="15.0" fill="rgb(223,82,50)" rx="2" ry="2" />
<text  x="512.87" y="959.5" >(anonymous namespace)::executeListenerMethods(ya..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (1,149,084,825 samples, 7.20%)</title><rect x="778.0" y="277" width="85.0" height="15.0" fill="rgb(209,146,32)" rx="2" ry="2" />
<text  x="780.96" y="287.5" >(anonymous..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (337,435,115 samples, 2.12%)</title><rect x="836.5" y="101" width="25.0" height="15.0" fill="rgb(235,149,44)" rx="2" ry="2" />
<text  x="839.52" y="111.5" >(..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,868,117,977 samples, 24.25%)</title><rect x="580.2" y="789" width="286.2" height="15.0" fill="rgb(241,174,21)" rx="2" ry="2" />
<text  x="583.24" y="799.5" >(anonymous namespace)::executeListener..</text>
</g>
<g >
<title>yawn::Lexer::fetchTokens() (496,851,625 samples, 3.12%)</title><rect x="1005.9" y="1029" width="36.7" height="15.0" fill="rgb(209,29,20)" rx="2" ry="2" />
<text  x="1008.89" y="1039.5" >yaw..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (996,550,099 samples, 6.25%)</title><rect x="789.0" y="245" width="73.8" height="15.0" fill="rgb(245,71,17)" rx="2" ry="2" />
<text  x="792.04" y="255.5" >(anonymo..</text>
</g>
<g >
<title>yawn::Input::LA(unsigned long) const (8,945,834 samples, 0.06%)</title><rect x="1117.6" y="1013" width="0.7" height="15.0" fill="rgb(208,134,13)" rx="2" ry="2" />
<text  x="1120.63" y="1023.5" ></text>
</g>
<g >
<title>ksDel (20,751,424 samples, 0.13%)</title><rect x="1188.5" y="1077" width="1.5" height="15.0" fill="rgb(247,118,31)" rx="2" ry="2" />
<text  x="1191.46" y="1087.5" ></text>
</g>
<g >
<title>keyVInit (1,387,783 samples, 0.01%)</title><rect x="1188.4" y="1061" width="0.1" height="15.0" fill="rgb(238,14,9)" rx="2" ry="2" />
<text  x="1191.36" y="1071.5" ></text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,878,790 samples, 0.01%)</title><rect x="862.2" y="165" width="0.2" height="15.0" fill="rgb(241,156,7)" rx="2" ry="2" />
<text  x="865.21" y="175.5" ></text>
</g>
<g >
<title>yawn::Input::LA(unsigned long) const (7,692,900 samples, 0.05%)</title><rect x="1069.5" y="1013" width="0.6" height="15.0" fill="rgb(247,152,13)" rx="2" ry="2" />
<text  x="1072.48" y="1023.5" ></text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,542,915 samples, 0.01%)</title><rect x="866.6" y="821" width="0.1" height="15.0" fill="rgb(206,0,7)" rx="2" ry="2" />
<text  x="869.63" y="831.5" ></text>
</g>
<g >
<title>keyVInit (2,032,701 samples, 0.01%)</title><rect x="864.7" y="501" width="0.1" height="15.0" fill="rgb(213,36,14)" rx="2" ry="2" />
<text  x="867.69" y="511.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (9,296,241 samples, 0.06%)</title><rect x="1185.4" y="981" width="0.7" height="15.0" fill="rgb(237,52,26)" rx="2" ry="2" />
<text  x="1188.37" y="991.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (2,013,878,752 samples, 12.63%)</title><rect x="714.8" y="453" width="149.0" height="15.0" fill="rgb(250,103,4)" rx="2" ry="2" />
<text  x="717.83" y="463.5" >(anonymous namespac..</text>
</g>
<g >
<title>yawn::Listener::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (2,182,685 samples, 0.01%)</title><rect x="863.7" y="437" width="0.1" height="15.0" fill="rgb(239,188,1)" rx="2" ry="2" />
<text  x="866.67" y="447.5" ></text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,044,060,285 samples, 19.09%)</title><rect x="640.4" y="645" width="225.2" height="15.0" fill="rgb(207,172,44)" rx="2" ry="2" />
<text  x="643.40" y="655.5" >(anonymous namespace)::execut..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,314,207,710 samples, 20.78%)</title><rect x="620.7" y="693" width="245.2" height="15.0" fill="rgb(217,208,42)" rx="2" ry="2" />
<text  x="623.69" y="703.5" >(anonymous namespace)::executeLi..</text>
</g>
<g >
<title>(anonymous namespace)::executeListenerMethods(yawn::Listener&amp;, yaep_tree_node const*) (3,223,626,914 samples, 20.21%)</title><rect x="627.3" y="677" width="238.5" height="15.0" fill="rgb(214,34,38)" rx="2" ry="2" />
<text  x="630.30" y="687.5" >(anonymous namespace)::executeL..</text>
</g>
<g >
<title>yawn::Lexer::scanDoubleQuotedScalar() (389,795,791 samples, 2.44%)</title><rect x="1042.6" y="1029" width="28.9" height="15.0" fill="rgb(239,33,7)" rx="2" ry="2" />
<text  x="1045.65" y="1039.5" >ya..</text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (1,562,823 samples, 0.01%)</title><rect x="871.4" y="997" width="0.1" height="15.0" fill="rgb(215,0,10)" rx="2" ry="2" />
<text  x="874.40" y="1007.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;, char, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char const*, char const*, char const*&amp;, char32_t*, char32_t*, char32_t*&amp;) const&gt;(char const*, char const*, std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char const*, char const*, char const*&amp;, char32_t*, char32_t*, char32_t*&amp;) const) (4,111,485 samples, 0.03%)</title><rect x="870.7" y="997" width="0.3" height="15.0" fill="rgb(247,25,41)" rx="2" ry="2" />
<text  x="873.74" y="1007.5" ></text>
</g>
<g >
<title>elektraYawnGet (13,860,432,683 samples, 86.90%)</title><rect x="162.9" y="1077" width="1025.4" height="15.0" fill="rgb(240,1,34)" rx="2" ry="2" />
<text  x="165.86" y="1087.5" >elektraYawnGet</text>
</g>
</g>
</svg>
