<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="294.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="277" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="277" > </text>
<g id="frames">
<g >
<title>keyVNew (553,605,763 samples, 3.19%)</title><rect x="850.9" y="101" width="37.7" height="15.0" fill="rgb(250,215,13)" rx="2" ry="2" />
<text  x="853.95" y="111.5" >key..</text>
</g>
<g >
<title>Lexer::scanToNextToken() (186,111,695 samples, 1.07%)</title><rect x="1041.5" y="101" width="12.6" height="15.0" fill="rgb(206,27,35)" rx="2" ry="2" />
<text  x="1044.49" y="111.5" ></text>
</g>
<g >
<title>Driver::exitValue(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (140,693,065 samples, 0.81%)</title><rect x="889.8" y="133" width="9.5" height="15.0" fill="rgb(236,55,7)" rx="2" ry="2" />
<text  x="892.78" y="143.5" ></text>
</g>
<g >
<title>keySetMeta (9,543,943 samples, 0.06%)</title><rect x="888.0" y="37" width="0.6" height="15.0" fill="rgb(209,20,14)" rx="2" ry="2" />
<text  x="890.96" y="47.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (6,733,923 samples, 0.04%)</title><rect x="1123.1" y="85" width="0.5" height="15.0" fill="rgb(229,213,14)" rx="2" ry="2" />
<text  x="1126.14" y="95.5" ></text>
</g>
<g >
<title>Lexer::addSimpleKeyCandidate() (2,159,432 samples, 0.01%)</title><rect x="1123.6" y="101" width="0.1" height="15.0" fill="rgb(246,115,44)" rx="2" ry="2" />
<text  x="1126.60" y="111.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (7,421,439 samples, 0.04%)</title><rect x="1146.5" y="85" width="0.5" height="15.0" fill="rgb(250,227,49)" rx="2" ry="2" />
<text  x="1149.48" y="95.5" ></text>
</g>
<g >
<title>Driver::parse(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (10,151,651,452 samples, 58.52%)</title><rect x="496.7" y="165" width="690.6" height="15.0" fill="rgb(227,147,27)" rx="2" ry="2" />
<text  x="499.66" y="175.5" >Driver::parse(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; c..</text>
</g>
<g >
<title>Input::getText[abi:cxx11](unsigned long) const (10,493,110 samples, 0.06%)</title><rect x="1122.9" y="101" width="0.7" height="15.0" fill="rgb(227,10,43)" rx="2" ry="2" />
<text  x="1125.88" y="111.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (4,184,749 samples, 0.02%)</title><rect x="1181.1" y="101" width="0.3" height="15.0" fill="rgb(229,91,3)" rx="2" ry="2" />
<text  x="1184.11" y="111.5" ></text>
</g>
<g >
<title>Input::consume() (2,369,091 samples, 0.01%)</title><rect x="1078.9" y="101" width="0.2" height="15.0" fill="rgb(232,196,49)" rx="2" ry="2" />
<text  x="1081.91" y="111.5" ></text>
</g>
<g >
<title>ksAppendKey (28,498,370 samples, 0.16%)</title><rect x="893.9" y="117" width="2.0" height="15.0" fill="rgb(235,189,41)" rx="2" ry="2" />
<text  x="896.94" y="127.5" ></text>
</g>
<g >
<title>yambi::Parser::stack&lt;yambi::Parser::stack_symbol_type, std::vector&lt;yambi::Parser::stack_symbol_type, std::allocator&lt;yambi::Parser::stack_symbol_type&gt; &gt; &gt;::push(yambi::Parser::stack_symbol_type&amp;&amp;) (14,733,493 samples, 0.08%)</title><rect x="1186.3" y="101" width="1.0" height="15.0" fill="rgb(243,38,7)" rx="2" ry="2" />
<text  x="1189.25" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::from_bytes(char const*, char const*) (8,209,508 samples, 0.05%)</title><rect x="657.9" y="117" width="0.5" height="15.0" fill="rgb(213,148,30)" rx="2" ry="2" />
<text  x="660.87" y="127.5" ></text>
</g>
<g >
<title>Lexer::countPlainNonSpace(unsigned long) const (341,646,486 samples, 1.97%)</title><rect x="1123.7" y="101" width="23.3" height="15.0" fill="rgb(221,27,0)" rx="2" ry="2" />
<text  x="1126.75" y="111.5" >L..</text>
</g>
<g >
<title>main (17,345,765,122 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(243,118,8)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >main</text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (10,370,707 samples, 0.06%)</title><rect x="1173.7" y="85" width="0.7" height="15.0" fill="rgb(232,113,20)" rx="2" ry="2" />
<text  x="1176.68" y="95.5" ></text>
</g>
<g >
<title>yambi::Parser::yypush_(char const*, int, yambi::Parser::symbol_type&amp;&amp;) (46,716,151 samples, 0.27%)</title><rect x="1184.1" y="133" width="3.2" height="15.0" fill="rgb(216,144,37)" rx="2" ry="2" />
<text  x="1187.08" y="143.5" ></text>
</g>
<g >
<title>ksDel (12,224,525 samples, 0.07%)</title><rect x="1187.7" y="165" width="0.8" height="15.0" fill="rgb(212,97,44)" rx="2" ry="2" />
<text  x="1190.72" y="175.5" ></text>
</g>
<g >
<title>Input::getText[abi:cxx11](unsigned long) const (29,977,162 samples, 0.17%)</title><rect x="1181.4" y="101" width="2.1" height="15.0" fill="rgb(209,186,48)" rx="2" ry="2" />
<text  x="1184.41" y="111.5" ></text>
</g>
<g >
<title>Input::getText[abi:cxx11](unsigned long) const (12,285,861 samples, 0.07%)</title><rect x="1079.1" y="101" width="0.8" height="15.0" fill="rgb(245,108,52)" rx="2" ry="2" />
<text  x="1082.07" y="111.5" ></text>
</g>
<g >
<title>yambi::Parser::yypush_(char const*, yambi::Parser::stack_symbol_type&amp;&amp;) (30,188,006 samples, 0.17%)</title><rect x="1185.2" y="117" width="2.1" height="15.0" fill="rgb(253,65,44)" rx="2" ry="2" />
<text  x="1188.20" y="127.5" ></text>
</g>
<g >
<title>ksClose (6,134,941 samples, 0.04%)</title><rect x="1188.1" y="149" width="0.4" height="15.0" fill="rgb(225,118,8)" rx="2" ry="2" />
<text  x="1191.13" y="159.5" ></text>
</g>
<g >
<title>Input::consume() (1,815,317 samples, 0.01%)</title><rect x="1122.8" y="101" width="0.1" height="15.0" fill="rgb(239,3,7)" rx="2" ry="2" />
<text  x="1125.76" y="111.5" ></text>
</g>
<g >
<title>elektraMalloc (6,385,627 samples, 0.04%)</title><rect x="889.3" y="101" width="0.4" height="15.0" fill="rgb(225,221,43)" rx="2" ry="2" />
<text  x="892.27" y="111.5" ></text>
</g>
<g >
<title>ksDup (7,300,090 samples, 0.04%)</title><rect x="496.2" y="149" width="0.5" height="15.0" fill="rgb(225,159,53)" rx="2" ry="2" />
<text  x="499.16" y="159.5" ></text>
</g>
<g >
<title>Input::consume() (2,423,528 samples, 0.01%)</title><rect x="1173.1" y="101" width="0.2" height="15.0" fill="rgb(210,153,39)" rx="2" ry="2" />
<text  x="1176.13" y="111.5" ></text>
</g>
<g >
<title>Input::index() const (4,638,965 samples, 0.03%)</title><rect x="1079.9" y="101" width="0.3" height="15.0" fill="rgb(237,82,22)" rx="2" ry="2" />
<text  x="1082.91" y="111.5" ></text>
</g>
<g >
<title>ksDel (19,460,167 samples, 0.11%)</title><rect x="1188.7" y="197" width="1.3" height="15.0" fill="rgb(226,156,38)" rx="2" ry="2" />
<text  x="1191.67" y="207.5" ></text>
</g>
<g >
<title>keyAddBaseName (16,564,779 samples, 0.10%)</title><rect x="888.6" y="117" width="1.1" height="15.0" fill="rgb(226,100,49)" rx="2" ry="2" />
<text  x="891.61" y="127.5" ></text>
</g>
<g >
<title>Lexer::scanPlainScalar() (981,309,622 samples, 5.66%)</title><rect x="1080.2" y="117" width="66.8" height="15.0" fill="rgb(232,182,13)" rx="2" ry="2" />
<text  x="1083.23" y="127.5" >Lexer::..</text>
</g>
<g >
<title>Lexer::Lexer(std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;) (21,575,951 samples, 0.12%)</title><rect x="657.0" y="149" width="1.4" height="15.0" fill="rgb(249,174,45)" rx="2" ry="2" />
<text  x="659.97" y="159.5" ></text>
</g>
<g >
<title>keySetOwner (19,159,790 samples, 0.11%)</title><rect x="887.3" y="53" width="1.3" height="15.0" fill="rgb(210,49,14)" rx="2" ry="2" />
<text  x="890.31" y="63.5" ></text>
</g>
<g >
<title>elektraKeySetName (225,998,354 samples, 1.30%)</title><rect x="873.2" y="69" width="15.4" height="15.0" fill="rgb(231,211,24)" rx="2" ry="2" />
<text  x="876.23" y="79.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (6,800,918 samples, 0.04%)</title><rect x="1122.3" y="101" width="0.5" height="15.0" fill="rgb(221,172,52)" rx="2" ry="2" />
<text  x="1125.30" y="111.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (9,880,086 samples, 0.06%)</title><rect x="1182.8" y="69" width="0.6" height="15.0" fill="rgb(226,84,26)" rx="2" ry="2" />
<text  x="1185.77" y="79.5" ></text>
</g>
<g >
<title>Lexer::nextToken() (4,177,305,725 samples, 24.08%)</title><rect x="899.3" y="133" width="284.2" height="15.0" fill="rgb(228,170,21)" rx="2" ry="2" />
<text  x="902.35" y="143.5" >Lexer::nextToken()</text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (758,682,794 samples, 4.37%)</title><rect x="837.0" y="117" width="51.6" height="15.0" fill="rgb(213,9,48)" rx="2" ry="2" />
<text  x="840.00" y="127.5" >kdb::..</text>
</g>
<g >
<title>elektraYambiGet (14,937,149,272 samples, 86.11%)</title><rect x="172.4" y="197" width="1016.2" height="15.0" fill="rgb(218,150,4)" rx="2" ry="2" />
<text  x="175.41" y="207.5" >elektraYambiGet</text>
</g>
<g >
<title>Lexer::addBlockEnd(unsigned long) (18,976,567 samples, 0.11%)</title><rect x="1040.2" y="101" width="1.3" height="15.0" fill="rgb(214,122,32)" rx="2" ry="2" />
<text  x="1043.20" y="111.5" ></text>
</g>
<g >
<title>Lexer::scanDoubleQuotedScalar() (383,457,647 samples, 2.21%)</title><rect x="1054.1" y="117" width="26.1" height="15.0" fill="rgb(215,87,19)" rx="2" ry="2" />
<text  x="1057.15" y="127.5" >L..</text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (3,978,739 samples, 0.02%)</title><rect x="1079.6" y="69" width="0.3" height="15.0" fill="rgb(217,136,54)" rx="2" ry="2" />
<text  x="1082.64" y="79.5" ></text>
</g>
<g >
<title>keySetMeta (9,603,615 samples, 0.06%)</title><rect x="898.7" y="85" width="0.6" height="15.0" fill="rgb(211,18,23)" rx="2" ry="2" />
<text  x="901.68" y="95.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;, char, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char const*, char const*, char const*&amp;, char32_t*, char32_t*, char32_t*&amp;) const&gt;(char const*, char const*, std::__cxx11::basic_string&lt;char32_t, std::char_traits&lt;char32_t&gt;, std::allocator&lt;char32_t&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char const*, char const*, char const*&amp;, char32_t*, char32_t*, char32_t*&amp;) const) (4,103,365 samples, 0.02%)</title><rect x="658.2" y="101" width="0.2" height="15.0" fill="rgb(214,127,8)" rx="2" ry="2" />
<text  x="661.15" y="111.5" ></text>
</g>
<g >
<title>keyAddName (65,122,557 samples, 0.38%)</title><rect x="882.8" y="53" width="4.5" height="15.0" fill="rgb(208,12,10)" rx="2" ry="2" />
<text  x="885.84" y="63.5" ></text>
</g>
<g >
<title>yambi::Parser::parse() (7,773,479,305 samples, 44.81%)</title><rect x="658.4" y="149" width="528.9" height="15.0" fill="rgb(223,33,53)" rx="2" ry="2" />
<text  x="661.44" y="159.5" >yambi::Parser::parse()</text>
</g>
<g >
<title>ksClose (9,916,899 samples, 0.06%)</title><rect x="1189.3" y="181" width="0.7" height="15.0" fill="rgb(218,182,40)" rx="2" ry="2" />
<text  x="1192.32" y="191.5" ></text>
</g>
<g >
<title>yambi::Parser::stack&lt;yambi::Parser::stack_symbol_type, std::vector&lt;yambi::Parser::stack_symbol_type, std::allocator&lt;yambi::Parser::stack_symbol_type&gt; &gt; &gt;::push(yambi::Parser::stack_symbol_type&amp;&amp;) (6,262,752 samples, 0.04%)</title><rect x="1183.7" y="133" width="0.4" height="15.0" fill="rgb(232,200,25)" rx="2" ry="2" />
<text  x="1186.65" y="143.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (3,371,874 samples, 0.02%)</title><rect x="1123.4" y="69" width="0.2" height="15.0" fill="rgb(248,197,16)" rx="2" ry="2" />
<text  x="1126.37" y="79.5" ></text>
</g>
<g >
<title>Input::Input(std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;) (14,785,224 samples, 0.09%)</title><rect x="657.4" y="133" width="1.0" height="15.0" fill="rgb(212,5,11)" rx="2" ry="2" />
<text  x="660.43" y="143.5" ></text>
</g>
<g >
<title>Lexer::scanSingleQuotedScalar() (409,136,797 samples, 2.36%)</title><rect x="1147.0" y="117" width="27.8" height="15.0" fill="rgb(251,191,16)" rx="2" ry="2" />
<text  x="1149.99" y="127.5" >L..</text>
</g>
<g >
<title>Driver::exitKey(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1,053,371,424 samples, 6.07%)</title><rect x="818.1" y="133" width="71.7" height="15.0" fill="rgb(238,180,50)" rx="2" ry="2" />
<text  x="821.11" y="143.5" >Driver::..</text>
</g>
<g >
<title>Driver::getKeySet() const (14,218,286 samples, 0.08%)</title><rect x="495.7" y="165" width="1.0" height="15.0" fill="rgb(242,25,35)" rx="2" ry="2" />
<text  x="498.69" y="175.5" ></text>
</g>
<g >
<title>keyVInit (376,225,034 samples, 2.17%)</title><rect x="863.0" y="85" width="25.6" height="15.0" fill="rgb(208,157,32)" rx="2" ry="2" />
<text  x="866.02" y="95.5" >k..</text>
</g>
<g >
<title>ksAppend (6,815,834 samples, 0.04%)</title><rect x="1187.3" y="165" width="0.4" height="15.0" fill="rgb(245,96,23)" rx="2" ry="2" />
<text  x="1190.25" y="175.5" ></text>
</g>
<g >
<title>elektraStrLen (4,763,403 samples, 0.03%)</title><rect x="899.0" y="69" width="0.3" height="15.0" fill="rgb(243,103,6)" rx="2" ry="2" />
<text  x="902.01" y="79.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (3,238,230 samples, 0.02%)</title><rect x="1053.9" y="85" width="0.2" height="15.0" fill="rgb(215,139,27)" rx="2" ry="2" />
<text  x="1056.88" y="95.5" ></text>
</g>
<g >
<title>Input::getText[abi:cxx11](unsigned long) const (16,089,909 samples, 0.09%)</title><rect x="1173.3" y="101" width="1.1" height="15.0" fill="rgb(205,201,41)" rx="2" ry="2" />
<text  x="1176.29" y="111.5" ></text>
</g>
<g >
<title>Lexer::scanValue() (127,212,755 samples, 0.73%)</title><rect x="1174.8" y="117" width="8.7" height="15.0" fill="rgb(228,98,33)" rx="2" ry="2" />
<text  x="1177.82" y="127.5" ></text>
</g>
<g >
<title>Input::index() const (6,305,068 samples, 0.04%)</title><rect x="1174.4" y="101" width="0.4" height="15.0" fill="rgb(216,208,40)" rx="2" ry="2" />
<text  x="1177.39" y="111.5" ></text>
</g>
<g >
<title>std::deque&lt;kdb::Key, std::allocator&lt;kdb::Key&gt; &gt;::pop_back() (1,909,470 samples, 0.01%)</title><rect x="1183.5" y="133" width="0.2" height="15.0" fill="rgb(230,224,8)" rx="2" ry="2" />
<text  x="1186.52" y="143.5" ></text>
</g>
<g >
<title>bool std::__do_str_codecvt&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char32_t, std::codecvt&lt;char32_t, char, __mbstate_t&gt;, __mbstate_t, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const&gt;(char32_t const*, char32_t const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::codecvt&lt;char32_t, char, __mbstate_t&gt; const&amp;, __mbstate_t&amp;, unsigned long&amp;, std::codecvt_base::result (std::codecvt&lt;char32_t, char, __mbstate_t&gt;::*)(__mbstate_t&amp;, char32_t const*, char32_t const*, char32_t const*&amp;, char*, char*, char*&amp;) const) (5,138,912 samples, 0.03%)</title><rect x="1174.0" y="69" width="0.4" height="15.0" fill="rgb(234,99,54)" rx="2" ry="2" />
<text  x="1177.04" y="79.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (7,162,399 samples, 0.04%)</title><rect x="1172.6" y="101" width="0.5" height="15.0" fill="rgb(237,35,4)" rx="2" ry="2" />
<text  x="1175.64" y="111.5" ></text>
</g>
<g >
<title>all (17,345,849,173 samples, 100%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(216,84,37)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>keyIncRef (6,727,666 samples, 0.04%)</title><rect x="850.5" y="101" width="0.4" height="15.0" fill="rgb(221,29,24)" rx="2" ry="2" />
<text  x="853.49" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (7,975,537 samples, 0.05%)</title><rect x="1079.4" y="85" width="0.5" height="15.0" fill="rgb(205,127,18)" rx="2" ry="2" />
<text  x="1082.37" y="95.5" ></text>
</g>
<g >
<title>addToKeySet(kdb::KeySet&amp;, kdb::Key&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (12,561,031,668 samples, 72.42%)</title><rect x="334.1" y="181" width="854.5" height="15.0" fill="rgb(215,144,39)" rx="2" ry="2" />
<text  x="337.05" y="191.5" >addToKeySet(kdb::KeySet&amp;, kdb::Key&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; c..</text>
</g>
<g >
<title>std::__cxx11::wstring_convert&lt;std::codecvt_utf8&lt;char32_t, 1114111ul, (std::codecvt_mode)0&gt;, char32_t, std::allocator&lt;char32_t&gt;, std::allocator&lt;char&gt; &gt;::to_bytes(char32_t const*, char32_t const*) (19,382,661 samples, 0.11%)</title><rect x="1182.1" y="85" width="1.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1185.12" y="95.5" ></text>
</g>
<g >
<title>thread_107 (17,345,849,173 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(246,108,40)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >thread_107</text>
</g>
<g >
<title>elektraKeyLock (1,549,756 samples, 0.01%)</title><rect x="895.7" y="101" width="0.1" height="15.0" fill="rgb(225,133,52)" rx="2" ry="2" />
<text  x="898.73" y="111.5" ></text>
</g>
<g >
<title>keyNew (1,755,636 samples, 0.01%)</title><rect x="1188.6" y="197" width="0.1" height="15.0" fill="rgb(229,206,8)" rx="2" ry="2" />
<text  x="1191.55" y="207.5" ></text>
</g>
<g >
<title>void kdb::Key::set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;) (50,951,794 samples, 0.29%)</title><rect x="895.9" y="117" width="3.4" height="15.0" fill="rgb(251,180,43)" rx="2" ry="2" />
<text  x="898.88" y="127.5" ></text>
</g>
<g >
<title>Lexer::fetchTokens() (500,542,585 samples, 2.89%)</title><rect x="1020.1" y="117" width="34.0" height="15.0" fill="rgb(205,162,35)" rx="2" ry="2" />
<text  x="1023.10" y="127.5" >Le..</text>
</g>
<g >
<title>keySetString (27,373,712 samples, 0.16%)</title><rect x="897.5" y="101" width="1.8" height="15.0" fill="rgb(242,48,31)" rx="2" ry="2" />
<text  x="900.49" y="111.5" ></text>
</g>
<g >
<title>Input::LA(unsigned long) const (5,726,272 samples, 0.03%)</title><rect x="1078.5" y="101" width="0.4" height="15.0" fill="rgb(239,161,34)" rx="2" ry="2" />
<text  x="1081.52" y="111.5" ></text>
</g>
</g>
</svg>
