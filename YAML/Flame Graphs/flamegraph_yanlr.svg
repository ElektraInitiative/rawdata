<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1638" onload="init(evt)" viewBox="0 0 1200 1638" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1638.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1621" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="1621" > </text>
<g id="frames">
<g >
<title>yanlr::YAML::map() (2,698,482,607 samples, 13.74%)</title><rect x="1004.3" y="1045" width="162.1" height="15.0" fill="rgb(232,42,45)" rx="2" ry="2" />
<text  x="1007.29" y="1055.5" >yanlr::YAML::map()</text>
</g>
<g >
<title>kdb::Key::Key(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, ...) (782,674,940 samples, 3.98%)</title><rect x="186.9" y="1509" width="47.1" height="15.0" fill="rgb(216,217,48)" rx="2" ry="2" />
<text  x="189.94" y="1519.5" >kdb:..</text>
</g>
<g >
<title>yanlr::YAML::child() (3,862,883,917 samples, 19.66%)</title><rect x="937.4" y="1125" width="232.0" height="15.0" fill="rgb(212,18,7)" rx="2" ry="2" />
<text  x="940.39" y="1135.5" >yanlr::YAML::child()</text>
</g>
<g >
<title>yanlr::YAML::pairs() (672,850,482 samples, 3.42%)</title><rect x="1118.8" y="773" width="40.4" height="15.0" fill="rgb(222,35,42)" rx="2" ry="2" />
<text  x="1121.79" y="783.5" >yan..</text>
</g>
<g >
<title>yanlr::YAML::pairs() (307,607,530 samples, 1.57%)</title><rect x="1138.7" y="645" width="18.5" height="15.0" fill="rgb(232,164,54)" rx="2" ry="2" />
<text  x="1141.71" y="655.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (9,560,126,009 samples, 48.66%)</title><rect x="611.0" y="1349" width="574.2" height="15.0" fill="rgb(241,154,41)" rx="2" ry="2" />
<text  x="613.99" y="1359.5" >yanlr::YAML::pairs()</text>
</g>
<g >
<title>keyVNew (575,224,388 samples, 2.93%)</title><rect x="199.4" y="1493" width="34.6" height="15.0" fill="rgb(220,33,34)" rx="2" ry="2" />
<text  x="202.41" y="1503.5" >ke..</text>
</g>
<g >
<title>yanlr::YAML::pair() (4,197,433,871 samples, 21.37%)</title><rect x="920.4" y="1141" width="252.1" height="15.0" fill="rgb(215,24,26)" rx="2" ry="2" />
<text  x="923.39" y="1151.5" >yanlr::YAML::pair()</text>
</g>
<g >
<title>elektraStrLen (4,878,424 samples, 0.02%)</title><rect x="240.3" y="1477" width="0.3" height="15.0" fill="rgb(244,57,8)" rx="2" ry="2" />
<text  x="243.32" y="1487.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (14,609,514,837 samples, 74.37%)</title><rect x="310.9" y="1493" width="877.5" height="15.0" fill="rgb(254,112,46)" rx="2" ry="2" />
<text  x="313.92" y="1503.5" >yanlr::YAML::map()</text>
</g>
<g >
<title>yanlr::YAML::child() (8,472,395,183 samples, 43.13%)</title><rect x="672.4" y="1317" width="508.9" height="15.0" fill="rgb(247,174,24)" rx="2" ry="2" />
<text  x="675.37" y="1327.5" >yanlr::YAML::child()</text>
</g>
<g >
<title>ksClose (11,062,102 samples, 0.06%)</title><rect x="1189.3" y="1525" width="0.7" height="15.0" fill="rgb(210,12,30)" rx="2" ry="2" />
<text  x="1192.33" y="1535.5" ></text>
</g>
<g >
<title>yanlr::YAML::value() (3,976,032 samples, 0.02%)</title><rect x="1164.0" y="981" width="0.3" height="15.0" fill="rgb(205,130,30)" rx="2" ry="2" />
<text  x="1167.02" y="991.5" ></text>
</g>
<g >
<title>yanlr::YAML::PairContext::key() (9,344,334 samples, 0.05%)</title><rect x="234.5" y="1509" width="0.6" height="15.0" fill="rgb(212,194,43)" rx="2" ry="2" />
<text  x="237.55" y="1519.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (4,093,440 samples, 0.02%)</title><rect x="1161.6" y="853" width="0.2" height="15.0" fill="rgb(213,101,9)" rx="2" ry="2" />
<text  x="1164.60" y="863.5" ></text>
</g>
<g >
<title>yanlr::YAML::value() (3,890,489 samples, 0.02%)</title><rect x="1166.4" y="1045" width="0.2" height="15.0" fill="rgb(249,97,30)" rx="2" ry="2" />
<text  x="1169.37" y="1055.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (5,202,628 samples, 0.03%)</title><rect x="1156.9" y="613" width="0.3" height="15.0" fill="rgb(207,172,32)" rx="2" ry="2" />
<text  x="1159.88" y="623.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (1,552,394,645 samples, 7.90%)</title><rect x="1069.0" y="933" width="93.3" height="15.0" fill="rgb(229,111,31)" rx="2" ry="2" />
<text  x="1072.03" y="943.5" >yanlr::YAML..</text>
</g>
<g >
<title>yanlr::YAMLLexer::scanToNextToken() (3,231,927 samples, 0.02%)</title><rect x="1180.1" y="1221" width="0.2" height="15.0" fill="rgb(238,128,13)" rx="2" ry="2" />
<text  x="1183.10" y="1231.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (5,174,049 samples, 0.03%)</title><rect x="1156.4" y="549" width="0.3" height="15.0" fill="rgb(250,132,33)" rx="2" ry="2" />
<text  x="1159.42" y="559.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (369,568,146 samples, 1.88%)</title><rect x="1135.1" y="677" width="22.2" height="15.0" fill="rgb(213,104,51)" rx="2" ry="2" />
<text  x="1138.10" y="687.5" >y..</text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (40,638,330 samples, 0.21%)</title><rect x="1178.4" y="1253" width="2.5" height="15.0" fill="rgb(214,20,14)" rx="2" ry="2" />
<text  x="1181.42" y="1263.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (10,077,018,727 samples, 51.29%)</title><rect x="580.0" y="1365" width="605.3" height="15.0" fill="rgb(234,69,17)" rx="2" ry="2" />
<text  x="582.99" y="1375.5" >yanlr::YAML::map()</text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (7,870,389 samples, 0.04%)</title><rect x="1171.5" y="1109" width="0.5" height="15.0" fill="rgb(216,67,37)" rx="2" ry="2" />
<text  x="1174.55" y="1119.5" ></text>
</g>
<g >
<title>main (19,645,296,234 samples, 100.00%)</title><rect x="10.0" y="1557" width="1180.0" height="15.0" fill="rgb(229,89,44)" rx="2" ry="2" />
<text  x="13.00" y="1567.5" >main</text>
</g>
<g >
<title>yanlr::YAML::pairs() (4,483,813,135 samples, 22.82%)</title><rect x="903.2" y="1157" width="269.3" height="15.0" fill="rgb(207,111,36)" rx="2" ry="2" />
<text  x="906.19" y="1167.5" >yanlr::YAML::pairs()</text>
</g>
<g >
<title>yanlr::YAML::pair() (112,174,306 samples, 0.57%)</title><rect x="1149.5" y="501" width="6.8" height="15.0" fill="rgb(207,70,2)" rx="2" ry="2" />
<text  x="1152.53" y="511.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanDoubleQuotedScalar() (2,418,986 samples, 0.01%)</title><rect x="1184.6" y="1301" width="0.2" height="15.0" fill="rgb(231,52,28)" rx="2" ry="2" />
<text  x="1187.64" y="1311.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (14,439,631 samples, 0.07%)</title><rect x="1169.4" y="1125" width="0.9" height="15.0" fill="rgb(240,105,3)" rx="2" ry="2" />
<text  x="1172.42" y="1135.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (16,027,230 samples, 0.08%)</title><rect x="1154.8" y="261" width="1.0" height="15.0" fill="rgb(225,156,17)" rx="2" ry="2" />
<text  x="1157.84" y="271.5" ></text>
</g>
<g >
<title>keyVInit (381,263,511 samples, 1.94%)</title><rect x="211.1" y="1477" width="22.9" height="15.0" fill="rgb(249,107,53)" rx="2" ry="2" />
<text  x="214.06" y="1487.5" >k..</text>
</g>
<g >
<title>yanlr::YAML::child() (96,590,637 samples, 0.49%)</title><rect x="1150.3" y="485" width="5.8" height="15.0" fill="rgb(230,199,32)" rx="2" ry="2" />
<text  x="1153.28" y="495.5" ></text>
</g>
<g >
<title>ksAppendKey (24,332,925 samples, 0.12%)</title><rect x="240.6" y="1509" width="1.5" height="15.0" fill="rgb(232,158,38)" rx="2" ry="2" />
<text  x="243.62" y="1519.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (617,298,113 samples, 3.14%)</title><rect x="1122.1" y="757" width="37.1" height="15.0" fill="rgb(253,24,16)" rx="2" ry="2" />
<text  x="1125.13" y="767.5" >yan..</text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (17,162,108 samples, 0.09%)</title><rect x="1161.0" y="869" width="1.0" height="15.0" fill="rgb(248,40,5)" rx="2" ry="2" />
<text  x="1164.01" y="879.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (7,080,870 samples, 0.04%)</title><rect x="1155.3" y="165" width="0.5" height="15.0" fill="rgb(208,166,28)" rx="2" ry="2" />
<text  x="1158.33" y="175.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanPlainScalar() (3,145,200 samples, 0.02%)</title><rect x="1172.1" y="1109" width="0.2" height="15.0" fill="rgb(247,121,46)" rx="2" ry="2" />
<text  x="1175.14" y="1119.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (4,855,671 samples, 0.02%)</title><rect x="1170.0" y="1109" width="0.3" height="15.0" fill="rgb(233,119,3)" rx="2" ry="2" />
<text  x="1172.99" y="1119.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (201,515,138 samples, 1.03%)</title><rect x="1144.6" y="581" width="12.1" height="15.0" fill="rgb(205,82,24)" rx="2" ry="2" />
<text  x="1147.62" y="591.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (4,796,587 samples, 0.02%)</title><rect x="1160.1" y="789" width="0.3" height="15.0" fill="rgb(238,144,32)" rx="2" ry="2" />
<text  x="1163.14" y="799.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanToNextToken() (2,004,085 samples, 0.01%)</title><rect x="1187.9" y="1349" width="0.1" height="15.0" fill="rgb(235,47,10)" rx="2" ry="2" />
<text  x="1190.88" y="1359.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (5,486,341 samples, 0.03%)</title><rect x="1186.3" y="1365" width="0.3" height="15.0" fill="rgb(220,19,42)" rx="2" ry="2" />
<text  x="1189.30" y="1375.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (3,422,792 samples, 0.02%)</title><rect x="1155.5" y="85" width="0.2" height="15.0" fill="rgb(209,184,17)" rx="2" ry="2" />
<text  x="1158.54" y="95.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (2,863,557 samples, 0.01%)</title><rect x="1157.7" y="661" width="0.2" height="15.0" fill="rgb(233,137,28)" rx="2" ry="2" />
<text  x="1160.73" y="671.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanPlainScalar() (4,006,412 samples, 0.02%)</title><rect x="1184.8" y="1301" width="0.2" height="15.0" fill="rgb(227,126,6)" rx="2" ry="2" />
<text  x="1187.78" y="1311.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanSingleQuotedScalar() (2,511,868 samples, 0.01%)</title><rect x="1180.7" y="1237" width="0.1" height="15.0" fill="rgb(252,133,50)" rx="2" ry="2" />
<text  x="1183.67" y="1247.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (39,300,595 samples, 0.20%)</title><rect x="1174.2" y="1189" width="2.4" height="15.0" fill="rgb(242,21,18)" rx="2" ry="2" />
<text  x="1177.21" y="1199.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (4,094,193 samples, 0.02%)</title><rect x="1187.8" y="1365" width="0.2" height="15.0" fill="rgb(213,6,32)" rx="2" ry="2" />
<text  x="1190.76" y="1375.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (1,914,888 samples, 0.01%)</title><rect x="1160.9" y="853" width="0.1" height="15.0" fill="rgb(242,213,2)" rx="2" ry="2" />
<text  x="1163.89" y="863.5" ></text>
</g>
<g >
<title>yanlr::KeyListener::keySet() (13,238,863 samples, 0.07%)</title><rect x="242.1" y="1525" width="0.8" height="15.0" fill="rgb(221,75,29)" rx="2" ry="2" />
<text  x="245.09" y="1535.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (8,007,170 samples, 0.04%)</title><rect x="1173.7" y="1173" width="0.5" height="15.0" fill="rgb(228,141,3)" rx="2" ry="2" />
<text  x="1176.73" y="1183.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (1,709,110,862 samples, 8.70%)</title><rect x="1061.3" y="949" width="102.6" height="15.0" fill="rgb(248,98,48)" rx="2" ry="2" />
<text  x="1064.28" y="959.5" >yanlr::YAML:..</text>
</g>
<g >
<title>yanlr::YAML::pairs() (41,764,820 samples, 0.21%)</title><rect x="1153.4" y="389" width="2.5" height="15.0" fill="rgb(223,38,54)" rx="2" ry="2" />
<text  x="1156.41" y="399.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (244,653,268 samples, 1.25%)</title><rect x="1142.1" y="613" width="14.7" height="15.0" fill="rgb(241,103,4)" rx="2" ry="2" />
<text  x="1145.06" y="623.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanToNextToken() (3,154,564 samples, 0.02%)</title><rect x="1184.4" y="1285" width="0.2" height="15.0" fill="rgb(253,134,17)" rx="2" ry="2" />
<text  x="1187.45" y="1295.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (40,833,674 samples, 0.21%)</title><rect x="1182.8" y="1317" width="2.4" height="15.0" fill="rgb(254,136,50)" rx="2" ry="2" />
<text  x="1185.77" y="1327.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (6,828,190 samples, 0.03%)</title><rect x="1164.8" y="981" width="0.4" height="15.0" fill="rgb(211,107,5)" rx="2" ry="2" />
<text  x="1167.75" y="991.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (48,814,939 samples, 0.25%)</title><rect x="1153.0" y="405" width="2.9" height="15.0" fill="rgb(207,178,42)" rx="2" ry="2" />
<text  x="1155.99" y="415.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (155,339,667 samples, 0.79%)</title><rect x="1147.0" y="549" width="9.3" height="15.0" fill="rgb(205,158,42)" rx="2" ry="2" />
<text  x="1150.00" y="559.5" ></text>
</g>
<g >
<title>yanlr::YAML::value() (5,075,333 samples, 0.03%)</title><rect x="1172.7" y="1173" width="0.3" height="15.0" fill="rgb(216,15,48)" rx="2" ry="2" />
<text  x="1175.66" y="1183.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (17,899,049 samples, 0.09%)</title><rect x="1162.9" y="933" width="1.0" height="15.0" fill="rgb(227,224,46)" rx="2" ry="2" />
<text  x="1165.87" y="943.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (9,801,192 samples, 0.05%)</title><rect x="1162.3" y="933" width="0.6" height="15.0" fill="rgb(233,126,11)" rx="2" ry="2" />
<text  x="1165.28" y="943.5" ></text>
</g>
<g >
<title>all (19,645,394,413 samples, 100%)</title><rect x="10.0" y="1589" width="1180.0" height="15.0" fill="rgb(229,114,17)" rx="2" ry="2" />
<text  x="13.00" y="1599.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (), yanlr::YAML::pair()::$_7&gt;::_M_invoke(std::_Any_data const&amp;) (2,713,730 samples, 0.01%)</title><rect x="778.9" y="1253" width="0.2" height="15.0" fill="rgb(211,68,24)" rx="2" ry="2" />
<text  x="781.91" y="1263.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (55,853,637 samples, 0.28%)</title><rect x="1152.6" y="421" width="3.3" height="15.0" fill="rgb(231,122,40)" rx="2" ry="2" />
<text  x="1155.57" y="431.5" ></text>
</g>
<g >
<title>keyDecRef (2,662,861 samples, 0.01%)</title><rect x="167.0" y="1509" width="0.1" height="15.0" fill="rgb(246,179,54)" rx="2" ry="2" />
<text  x="169.96" y="1519.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (1,673,191 samples, 0.01%)</title><rect x="1165.9" y="981" width="0.1" height="15.0" fill="rgb(236,144,24)" rx="2" ry="2" />
<text  x="1168.92" y="991.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (19,759,355 samples, 0.10%)</title><rect x="1154.6" y="293" width="1.2" height="15.0" fill="rgb(252,127,28)" rx="2" ry="2" />
<text  x="1157.62" y="303.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;yanlr::YAML::scalar()::$_4&gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation) (2,042,309 samples, 0.01%)</title><rect x="1178.3" y="1221" width="0.1" height="15.0" fill="rgb(245,211,21)" rx="2" ry="2" />
<text  x="1181.30" y="1231.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (6,240,455,437 samples, 31.77%)</title><rect x="801.9" y="1237" width="374.8" height="15.0" fill="rgb(241,108,23)" rx="2" ry="2" />
<text  x="804.87" y="1247.5" >yanlr::YAML::map()</text>
</g>
<g >
<title>yanlr::YAML::pair() (36,269,682 samples, 0.18%)</title><rect x="1153.7" y="373" width="2.2" height="15.0" fill="rgb(232,159,20)" rx="2" ry="2" />
<text  x="1156.74" y="383.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;yanlr::YAML::map()::$_5&gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation) (1,812,316 samples, 0.01%)</title><rect x="1053.3" y="965" width="0.1" height="15.0" fill="rgb(247,203,26)" rx="2" ry="2" />
<text  x="1056.25" y="975.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (5,300,055 samples, 0.03%)</title><rect x="1167.1" y="1045" width="0.3" height="15.0" fill="rgb(220,23,29)" rx="2" ry="2" />
<text  x="1170.13" y="1055.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (2,001,870 samples, 0.01%)</title><rect x="1156.1" y="485" width="0.2" height="15.0" fill="rgb(248,154,13)" rx="2" ry="2" />
<text  x="1159.14" y="495.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (730,725,530 samples, 3.72%)</title><rect x="1115.3" y="789" width="43.9" height="15.0" fill="rgb(238,16,49)" rx="2" ry="2" />
<text  x="1118.35" y="799.5" >yanl..</text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;yanlr::YAML::scalar()::$_4&gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation) (2,572,325 samples, 0.01%)</title><rect x="1182.6" y="1285" width="0.2" height="15.0" fill="rgb(221,94,20)" rx="2" ry="2" />
<text  x="1185.61" y="1295.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (543,732,069 samples, 2.77%)</title><rect x="1125.4" y="741" width="32.6" height="15.0" fill="rgb(226,174,33)" rx="2" ry="2" />
<text  x="1128.39" y="751.5" >ya..</text>
</g>
<g >
<title>yanlr::YAML::value() (7,471,075 samples, 0.04%)</title><rect x="1185.3" y="1365" width="0.4" height="15.0" fill="rgb(214,174,24)" rx="2" ry="2" />
<text  x="1188.26" y="1375.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanDoubleQuotedScalar() (1,861,706 samples, 0.01%)</title><rect x="1188.0" y="1365" width="0.1" height="15.0" fill="rgb(212,192,21)" rx="2" ry="2" />
<text  x="1191.00" y="1375.5" ></text>
</g>
<g >
<title>yanlr::YAML::value() (1,881,998 samples, 0.01%)</title><rect x="1157.2" y="661" width="0.1" height="15.0" fill="rgb(236,63,32)" rx="2" ry="2" />
<text  x="1160.19" y="671.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (1,238,535,196 samples, 6.30%)</title><rect x="1087.6" y="885" width="74.4" height="15.0" fill="rgb(212,5,3)" rx="2" ry="2" />
<text  x="1090.65" y="895.5" >yanlr::Y..</text>
</g>
<g >
<title>yanlr::YAMLLexer::scanPlainScalar() (1,931,254 samples, 0.01%)</title><rect x="1163.7" y="917" width="0.1" height="15.0" fill="rgb(216,49,13)" rx="2" ry="2" />
<text  x="1166.73" y="927.5" ></text>
</g>
<g >
<title>yanlr::YAML::value() (4,872,966 samples, 0.02%)</title><rect x="1176.7" y="1237" width="0.3" height="15.0" fill="rgb(207,122,33)" rx="2" ry="2" />
<text  x="1179.70" y="1247.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (10,835,951 samples, 0.06%)</title><rect x="1155.1" y="213" width="0.7" height="15.0" fill="rgb(224,173,25)" rx="2" ry="2" />
<text  x="1158.12" y="223.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (86,179,665 samples, 0.44%)</title><rect x="1150.9" y="469" width="5.2" height="15.0" fill="rgb(220,45,4)" rx="2" ry="2" />
<text  x="1153.90" y="479.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (14,044,782,712 samples, 71.49%)</title><rect x="344.8" y="1477" width="843.6" height="15.0" fill="rgb(208,89,38)" rx="2" ry="2" />
<text  x="347.84" y="1487.5" >yanlr::YAML::pairs()</text>
</g>
<g >
<title>yanlr::YAMLLexer::scanDoubleQuotedScalar() (2,483,589 samples, 0.01%)</title><rect x="1180.3" y="1237" width="0.1" height="15.0" fill="rgb(249,153,32)" rx="2" ry="2" />
<text  x="1183.29" y="1247.5" ></text>
</g>
<g >
<title>keyAddName (62,298,878 samples, 0.32%)</title><rect x="228.1" y="1445" width="3.8" height="15.0" fill="rgb(222,144,54)" rx="2" ry="2" />
<text  x="231.12" y="1455.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (336,602,969 samples, 1.71%)</title><rect x="1137.0" y="661" width="20.2" height="15.0" fill="rgb(225,33,2)" rx="2" ry="2" />
<text  x="1139.97" y="671.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (14,684,066 samples, 0.07%)</title><rect x="1185.7" y="1381" width="0.9" height="15.0" fill="rgb(208,187,23)" rx="2" ry="2" />
<text  x="1188.75" y="1391.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (2,130,579,222 samples, 10.85%)</title><rect x="1036.3" y="997" width="128.0" height="15.0" fill="rgb(232,51,38)" rx="2" ry="2" />
<text  x="1039.29" y="1007.5" >yanlr::YAML::chi..</text>
</g>
<g >
<title>yanlr::YAML::pair() (279,346,311 samples, 1.42%)</title><rect x="1140.4" y="629" width="16.8" height="15.0" fill="rgb(216,120,30)" rx="2" ry="2" />
<text  x="1143.41" y="639.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (12,350,639,590 samples, 62.87%)</title><rect x="446.6" y="1429" width="741.8" height="15.0" fill="rgb(230,164,6)" rx="2" ry="2" />
<text  x="449.59" y="1439.5" >yanlr::YAML::map()</text>
</g>
<g >
<title>yanlr::YAMLLexer::scanSingleQuotedScalar() (2,016,954 samples, 0.01%)</title><rect x="1188.3" y="1365" width="0.1" height="15.0" fill="rgb(236,69,28)" rx="2" ry="2" />
<text  x="1191.28" y="1375.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (2,891,282,417 samples, 14.72%)</title><rect x="992.9" y="1061" width="173.7" height="15.0" fill="rgb(236,120,47)" rx="2" ry="2" />
<text  x="995.94" y="1071.5" >yanlr::YAML::child()</text>
</g>
<g >
<title>yanlr::YAML::map() (6,233,817 samples, 0.03%)</title><rect x="1155.4" y="149" width="0.4" height="15.0" fill="rgb(226,220,3)" rx="2" ry="2" />
<text  x="1158.38" y="159.5" ></text>
</g>
<g >
<title>yanlr::YAML::value() (4,240,918 samples, 0.02%)</title><rect x="1169.2" y="1109" width="0.2" height="15.0" fill="rgb(228,207,10)" rx="2" ry="2" />
<text  x="1172.16" y="1119.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (10,998,644 samples, 0.06%)</title><rect x="1182.1" y="1301" width="0.7" height="15.0" fill="rgb(237,154,51)" rx="2" ry="2" />
<text  x="1185.11" y="1311.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (3,742,432 samples, 0.02%)</title><rect x="1158.3" y="725" width="0.2" height="15.0" fill="rgb(214,156,21)" rx="2" ry="2" />
<text  x="1161.25" y="735.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (2,339,599,222 samples, 11.91%)</title><rect x="1025.8" y="1013" width="140.5" height="15.0" fill="rgb(220,137,14)" rx="2" ry="2" />
<text  x="1028.80" y="1023.5" >yanlr::YAML::pair()</text>
</g>
<g >
<title>std::_Function_handler&lt;void (), yanlr::YAML::value()::$_3&gt;::_M_invoke(std::_Any_data const&amp;) (1,784,452 samples, 0.01%)</title><rect x="1185.5" y="1349" width="0.1" height="15.0" fill="rgb(252,62,31)" rx="2" ry="2" />
<text  x="1188.52" y="1359.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (30,017,184 samples, 0.15%)</title><rect x="1186.6" y="1381" width="1.8" height="15.0" fill="rgb(250,124,7)" rx="2" ry="2" />
<text  x="1189.63" y="1391.5" ></text>
</g>
<g >
<title>elektraYanlrGet (18,320,034,464 samples, 93.25%)</title><rect x="88.2" y="1541" width="1100.4" height="15.0" fill="rgb(247,87,34)" rx="2" ry="2" />
<text  x="91.20" y="1551.5" >elektraYanlrGet</text>
</g>
<g >
<title>yanlr::YAML::pair() (2,460,224 samples, 0.01%)</title><rect x="1155.6" y="53" width="0.1" height="15.0" fill="rgb(242,27,21)" rx="2" ry="2" />
<text  x="1158.60" y="63.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (5,507,863,186 samples, 28.04%)</title><rect x="845.7" y="1205" width="330.9" height="15.0" fill="rgb(252,225,38)" rx="2" ry="2" />
<text  x="848.74" y="1215.5" >yanlr::YAML::pair()</text>
</g>
<g >
<title>keySetMeta (18,287,673 samples, 0.09%)</title><rect x="232.9" y="1429" width="1.1" height="15.0" fill="rgb(238,41,52)" rx="2" ry="2" />
<text  x="235.86" y="1439.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanPlainScalar() (1,917,014 samples, 0.01%)</title><rect x="1166.1" y="981" width="0.1" height="15.0" fill="rgb(223,182,42)" rx="2" ry="2" />
<text  x="1169.10" y="991.5" ></text>
</g>
<g >
<title>std::deque&lt;kdb::Key, std::allocator&lt;kdb::Key&gt; &gt;::pop_back() (6,724,160 samples, 0.03%)</title><rect x="166.8" y="1525" width="0.4" height="15.0" fill="rgb(233,204,44)" rx="2" ry="2" />
<text  x="169.75" y="1535.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanDoubleQuotedScalar() (1,846,540 samples, 0.01%)</title><rect x="1168.7" y="1045" width="0.1" height="15.0" fill="rgb(216,220,28)" rx="2" ry="2" />
<text  x="1171.67" y="1055.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (125,145,086 samples, 0.64%)</title><rect x="1148.7" y="517" width="7.6" height="15.0" fill="rgb(251,166,43)" rx="2" ry="2" />
<text  x="1151.75" y="527.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (1,440,544,343 samples, 7.33%)</title><rect x="1075.5" y="917" width="86.5" height="15.0" fill="rgb(211,144,52)" rx="2" ry="2" />
<text  x="1078.51" y="927.5" >yanlr::YAM..</text>
</g>
<g >
<title>yanlr::YAML::pair() (8,488,358 samples, 0.04%)</title><rect x="1155.3" y="181" width="0.5" height="15.0" fill="rgb(243,39,38)" rx="2" ry="2" />
<text  x="1158.26" y="191.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (4,781,318,931 samples, 24.34%)</title><rect x="885.5" y="1173" width="287.2" height="15.0" fill="rgb(217,229,32)" rx="2" ry="2" />
<text  x="888.47" y="1183.5" >yanlr::YAML::map()</text>
</g>
<g >
<title>yanlr::YAML::pairs() (25,731,202 samples, 0.13%)</title><rect x="1154.3" y="325" width="1.6" height="15.0" fill="rgb(229,138,47)" rx="2" ry="2" />
<text  x="1157.31" y="335.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (11,221,364,509 samples, 57.12%)</title><rect x="514.4" y="1397" width="674.0" height="15.0" fill="rgb(211,13,39)" rx="2" ry="2" />
<text  x="517.42" y="1407.5" >yanlr::YAML::pair()</text>
</g>
<g >
<title>yanlr::YAML::child() (1,879,434 samples, 0.01%)</title><rect x="1155.6" y="37" width="0.1" height="15.0" fill="rgb(237,216,7)" rx="2" ry="2" />
<text  x="1158.62" y="47.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (28,532,189 samples, 0.15%)</title><rect x="1154.1" y="341" width="1.8" height="15.0" fill="rgb(239,66,30)" rx="2" ry="2" />
<text  x="1157.14" y="351.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanPlainScalar() (2,783,267 samples, 0.01%)</title><rect x="1188.1" y="1365" width="0.2" height="15.0" fill="rgb(252,6,2)" rx="2" ry="2" />
<text  x="1191.11" y="1375.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (5,637,324 samples, 0.03%)</title><rect x="1160.7" y="869" width="0.3" height="15.0" fill="rgb(232,137,20)" rx="2" ry="2" />
<text  x="1163.67" y="879.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (1,982,194,384 samples, 10.09%)</title><rect x="1045.0" y="981" width="119.0" height="15.0" fill="rgb(224,136,24)" rx="2" ry="2" />
<text  x="1047.96" y="991.5" >yanlr::YAML::m..</text>
</g>
<g >
<title>keySetOwner (34,197,348 samples, 0.17%)</title><rect x="231.9" y="1445" width="2.1" height="15.0" fill="rgb(214,65,25)" rx="2" ry="2" />
<text  x="234.90" y="1455.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (19,417,219 samples, 0.10%)</title><rect x="1165.2" y="997" width="1.1" height="15.0" fill="rgb(236,77,47)" rx="2" ry="2" />
<text  x="1168.16" y="1007.5" ></text>
</g>
<g >
<title>yanlr::YAML::yaml() (15,739,169,027 samples, 80.12%)</title><rect x="243.1" y="1525" width="945.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="246.06" y="1535.5" >yanlr::YAML::yaml()</text>
</g>
<g >
<title>yanlr::YAML::map() (1,037,218,786 samples, 5.28%)</title><rect x="1098.3" y="853" width="62.3" height="15.0" fill="rgb(237,85,20)" rx="2" ry="2" />
<text  x="1101.26" y="863.5" >yanlr:..</text>
</g>
<g >
<title>yanlr::YAML::pair() (9,048,454,050 samples, 46.06%)</title><rect x="641.7" y="1333" width="543.5" height="15.0" fill="rgb(231,16,50)" rx="2" ry="2" />
<text  x="644.72" y="1343.5" >yanlr::YAML::pair()</text>
</g>
<g >
<title>yanlr::YAML::scalar() (3,894,125 samples, 0.02%)</title><rect x="1162.6" y="917" width="0.3" height="15.0" fill="rgb(207,53,2)" rx="2" ry="2" />
<text  x="1165.63" y="927.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (1,118,986,219 samples, 5.70%)</title><rect x="1093.5" y="869" width="67.2" height="15.0" fill="rgb(232,140,23)" rx="2" ry="2" />
<text  x="1096.46" y="879.5" >yanlr::..</text>
</g>
<g >
<title>ksClose (5,898,090 samples, 0.03%)</title><rect x="166.4" y="1509" width="0.4" height="15.0" fill="rgb(227,190,48)" rx="2" ry="2" />
<text  x="169.40" y="1519.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (222,255,714 samples, 1.13%)</title><rect x="1143.4" y="597" width="13.3" height="15.0" fill="rgb(219,136,31)" rx="2" ry="2" />
<text  x="1146.38" y="607.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (960,619,933 samples, 4.89%)</title><rect x="1102.9" y="837" width="57.7" height="15.0" fill="rgb(216,189,2)" rx="2" ry="2" />
<text  x="1105.86" y="847.5" >yanlr:..</text>
</g>
<g >
<title>yanlr::YAML::pairs() (1,841,017,939 samples, 9.37%)</title><rect x="1053.4" y="965" width="110.5" height="15.0" fill="rgb(249,123,36)" rx="2" ry="2" />
<text  x="1056.36" y="975.5" >yanlr::YAML::..</text>
</g>
<g >
<title>yanlr::YAML::child() (12,144,979 samples, 0.06%)</title><rect x="1155.0" y="229" width="0.8" height="15.0" fill="rgb(224,154,51)" rx="2" ry="2" />
<text  x="1158.04" y="239.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (1,802,793 samples, 0.01%)</title><rect x="1172.9" y="1157" width="0.1" height="15.0" fill="rgb(247,218,52)" rx="2" ry="2" />
<text  x="1175.85" y="1167.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (459,358,996 samples, 2.34%)</title><rect x="1130.4" y="709" width="27.6" height="15.0" fill="rgb(220,215,5)" rx="2" ry="2" />
<text  x="1133.40" y="719.5" >y..</text>
</g>
<g >
<title>elektraStrLen (9,057,195 samples, 0.05%)</title><rect x="233.4" y="1413" width="0.6" height="15.0" fill="rgb(208,16,24)" rx="2" ry="2" />
<text  x="236.41" y="1423.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (885,772,901 samples, 4.51%)</title><rect x="1107.4" y="821" width="53.2" height="15.0" fill="rgb(244,155,2)" rx="2" ry="2" />
<text  x="1110.36" y="831.5" >yanlr..</text>
</g>
<g >
<title>yanlr::YAML::pair() (181,470,643 samples, 0.92%)</title><rect x="1145.8" y="565" width="10.9" height="15.0" fill="rgb(208,34,44)" rx="2" ry="2" />
<text  x="1148.83" y="575.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (1,927,435 samples, 0.01%)</title><rect x="1156.8" y="613" width="0.1" height="15.0" fill="rgb(240,191,24)" rx="2" ry="2" />
<text  x="1159.76" y="623.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (6,803,666 samples, 0.03%)</title><rect x="1179.9" y="1237" width="0.4" height="15.0" fill="rgb(225,27,41)" rx="2" ry="2" />
<text  x="1182.89" y="1247.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanToNextToken() (1,768,498 samples, 0.01%)</title><rect x="1160.3" y="773" width="0.1" height="15.0" fill="rgb(234,115,50)" rx="2" ry="2" />
<text  x="1163.32" y="783.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (7,179,125 samples, 0.04%)</title><rect x="1158.0" y="741" width="0.5" height="15.0" fill="rgb(234,73,33)" rx="2" ry="2" />
<text  x="1161.05" y="751.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanSingleQuotedScalar() (2,491,893 samples, 0.01%)</title><rect x="1185.0" y="1301" width="0.2" height="15.0" fill="rgb(221,173,23)" rx="2" ry="2" />
<text  x="1188.02" y="1311.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (8,960,932 samples, 0.05%)</title><rect x="1157.5" y="677" width="0.5" height="15.0" fill="rgb(252,192,15)" rx="2" ry="2" />
<text  x="1160.46" y="687.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (5,091,039,940 samples, 25.91%)</title><rect x="867.2" y="1189" width="305.8" height="15.0" fill="rgb(206,189,35)" rx="2" ry="2" />
<text  x="870.17" y="1199.5" >yanlr::YAML::child()</text>
</g>
<g >
<title>yanlr::YAMLLexer::scanPlainScalar() (4,894,157 samples, 0.02%)</title><rect x="1176.1" y="1173" width="0.3" height="15.0" fill="rgb(247,129,17)" rx="2" ry="2" />
<text  x="1179.07" y="1183.5" ></text>
</g>
<g >
<title>ksDel (21,631,688 samples, 0.11%)</title><rect x="1188.7" y="1541" width="1.3" height="15.0" fill="rgb(221,151,40)" rx="2" ry="2" />
<text  x="1191.69" y="1551.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (5,867,822,554 samples, 29.87%)</title><rect x="824.1" y="1221" width="352.5" height="15.0" fill="rgb(219,109,19)" rx="2" ry="2" />
<text  x="827.12" y="1231.5" >yanlr::YAML::pairs()</text>
</g>
<g >
<title>yanlr::YAML::key() (24,979,287 samples, 0.13%)</title><rect x="1181.3" y="1317" width="1.5" height="15.0" fill="rgb(246,47,21)" rx="2" ry="2" />
<text  x="1184.27" y="1327.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (8,010,735,109 samples, 40.78%)</title><rect x="699.8" y="1301" width="481.1" height="15.0" fill="rgb(229,212,15)" rx="2" ry="2" />
<text  x="702.77" y="1311.5" >yanlr::YAML::map()</text>
</g>
<g >
<title>yanlr::YAML::map() (139,760,412 samples, 0.71%)</title><rect x="1147.9" y="533" width="8.4" height="15.0" fill="rgb(214,198,31)" rx="2" ry="2" />
<text  x="1150.91" y="543.5" ></text>
</g>
<g >
<title>ksAppend (6,475,164 samples, 0.03%)</title><rect x="165.7" y="1525" width="0.3" height="15.0" fill="rgb(235,192,45)" rx="2" ry="2" />
<text  x="168.66" y="1535.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (23,809,785 samples, 0.12%)</title><rect x="1177.0" y="1253" width="1.4" height="15.0" fill="rgb(211,114,32)" rx="2" ry="2" />
<text  x="1179.99" y="1263.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanSingleQuotedScalar() (2,239,350 samples, 0.01%)</title><rect x="1172.3" y="1109" width="0.2" height="15.0" fill="rgb(253,69,39)" rx="2" ry="2" />
<text  x="1175.33" y="1119.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (7,561,972,032 samples, 38.49%)</title><rect x="726.7" y="1285" width="454.2" height="15.0" fill="rgb(208,151,33)" rx="2" ry="2" />
<text  x="729.65" y="1295.5" >yanlr::YAML::pairs()</text>
</g>
<g >
<title>yanlr::YAML::key() (20,105,139 samples, 0.10%)</title><rect x="1173.0" y="1189" width="1.2" height="15.0" fill="rgb(205,53,11)" rx="2" ry="2" />
<text  x="1176.00" y="1199.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanPlainScalar() (3,770,563 samples, 0.02%)</title><rect x="1180.4" y="1237" width="0.3" height="15.0" fill="rgb(225,199,28)" rx="2" ry="2" />
<text  x="1183.44" y="1247.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (2,435,207 samples, 0.01%)</title><rect x="1172.5" y="1157" width="0.2" height="15.0" fill="rgb(239,127,39)" rx="2" ry="2" />
<text  x="1175.51" y="1167.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (17,792,615 samples, 0.09%)</title><rect x="1154.7" y="277" width="1.1" height="15.0" fill="rgb(251,70,21)" rx="2" ry="2" />
<text  x="1157.74" y="287.5" ></text>
</g>
<g >
<title>elektraKeySetName (234,773,960 samples, 1.20%)</title><rect x="219.9" y="1461" width="14.1" height="15.0" fill="rgb(236,102,5)" rx="2" ry="2" />
<text  x="222.85" y="1471.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (12,136,137 samples, 0.06%)</title><rect x="1158.5" y="741" width="0.7" height="15.0" fill="rgb(240,150,27)" rx="2" ry="2" />
<text  x="1161.48" y="751.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (419,745,690 samples, 2.14%)</title><rect x="1132.8" y="693" width="25.2" height="15.0" fill="rgb(246,196,6)" rx="2" ry="2" />
<text  x="1135.78" y="703.5" >y..</text>
</g>
<g >
<title>keyNew (1,732,646 samples, 0.01%)</title><rect x="1188.6" y="1541" width="0.1" height="15.0" fill="rgb(231,143,52)" rx="2" ry="2" />
<text  x="1191.59" y="1551.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (3,617,549,686 samples, 18.41%)</title><rect x="951.9" y="1109" width="217.3" height="15.0" fill="rgb(233,139,13)" rx="2" ry="2" />
<text  x="954.87" y="1119.5" >yanlr::YAML::map()</text>
</g>
<g >
<title>yanlr::YAMLLexer::scanDoubleQuotedScalar() (2,013,165 samples, 0.01%)</title><rect x="1172.0" y="1109" width="0.1" height="15.0" fill="rgb(240,89,31)" rx="2" ry="2" />
<text  x="1175.02" y="1119.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanSingleQuotedScalar() (3,310,159 samples, 0.02%)</title><rect x="1168.9" y="1045" width="0.2" height="15.0" fill="rgb(206,47,38)" rx="2" ry="2" />
<text  x="1171.93" y="1055.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (14,319,785 samples, 0.07%)</title><rect x="1154.9" y="245" width="0.9" height="15.0" fill="rgb(220,54,27)" rx="2" ry="2" />
<text  x="1157.94" y="255.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (14,431,275 samples, 0.07%)</title><rect x="1159.7" y="805" width="0.9" height="15.0" fill="rgb(241,207,40)" rx="2" ry="2" />
<text  x="1162.70" y="815.5" ></text>
</g>
<g >
<title>yanlr::KeyListener::exitValue(yanlr::YAML::ValueContext*) (116,052,659 samples, 0.59%)</title><rect x="235.1" y="1525" width="7.0" height="15.0" fill="rgb(211,144,7)" rx="2" ry="2" />
<text  x="238.12" y="1535.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (67,266,178 samples, 0.34%)</title><rect x="1152.0" y="437" width="4.1" height="15.0" fill="rgb(206,74,27)" rx="2" ry="2" />
<text  x="1155.03" y="447.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (3,310,220 samples, 0.02%)</title><rect x="1175.7" y="1173" width="0.2" height="15.0" fill="rgb(208,88,41)" rx="2" ry="2" />
<text  x="1178.74" y="1183.5" ></text>
</g>
<g >
<title>keyName (6,954,762 samples, 0.04%)</title><rect x="234.1" y="1509" width="0.4" height="15.0" fill="rgb(242,73,47)" rx="2" ry="2" />
<text  x="237.11" y="1519.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void (), yanlr::YAML::pair()::$_7&gt;::_M_invoke(std::_Any_data const&amp;) (1,822,244 samples, 0.01%)</title><rect x="867.1" y="1189" width="0.1" height="15.0" fill="rgb(231,59,0)" rx="2" ry="2" />
<text  x="870.06" y="1199.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (6,624,830,297 samples, 33.72%)</title><rect x="779.1" y="1253" width="397.9" height="15.0" fill="rgb(235,155,20)" rx="2" ry="2" />
<text  x="782.07" y="1263.5" >yanlr::YAML::child()</text>
</g>
<g >
<title>keyAddBaseName (2,517,077 samples, 0.01%)</title><rect x="234.0" y="1509" width="0.1" height="15.0" fill="rgb(248,57,10)" rx="2" ry="2" />
<text  x="236.96" y="1519.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (1,825,511 samples, 0.01%)</title><rect x="1156.6" y="533" width="0.1" height="15.0" fill="rgb(235,115,43)" rx="2" ry="2" />
<text  x="1159.57" y="543.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (6,297,722 samples, 0.03%)</title><rect x="1159.3" y="805" width="0.4" height="15.0" fill="rgb(249,13,0)" rx="2" ry="2" />
<text  x="1162.32" y="815.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (4,702,844 samples, 0.02%)</title><rect x="1155.5" y="117" width="0.3" height="15.0" fill="rgb(229,22,12)" rx="2" ry="2" />
<text  x="1158.47" y="127.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (31,547,122 samples, 0.16%)</title><rect x="1154.0" y="357" width="1.9" height="15.0" fill="rgb(233,114,42)" rx="2" ry="2" />
<text  x="1156.97" y="367.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (9,640,443 samples, 0.05%)</title><rect x="1155.2" y="197" width="0.6" height="15.0" fill="rgb(223,109,3)" rx="2" ry="2" />
<text  x="1158.19" y="207.5" ></text>
</g>
<g >
<title>yanlr::KeyListener::enterPair(yanlr::YAML::PairContext*) (1,131,228,384 samples, 5.76%)</title><rect x="167.2" y="1525" width="67.9" height="15.0" fill="rgb(224,161,28)" rx="2" ry="2" />
<text  x="170.16" y="1535.5" >yanlr::..</text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (2,163,018 samples, 0.01%)</title><rect x="1176.6" y="1221" width="0.1" height="15.0" fill="rgb(220,217,11)" rx="2" ry="2" />
<text  x="1179.57" y="1231.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;yanlr::YAML::map()::$_5&gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation) (2,128,130 samples, 0.01%)</title><rect x="726.5" y="1285" width="0.2" height="15.0" fill="rgb(235,65,28)" rx="2" ry="2" />
<text  x="729.53" y="1295.5" ></text>
</g>
<g >
<title>ksDel (11,761,514 samples, 0.06%)</title><rect x="166.0" y="1525" width="0.8" height="15.0" fill="rgb(230,213,7)" rx="2" ry="2" />
<text  x="169.05" y="1535.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanDoubleQuotedScalar() (2,269,929 samples, 0.01%)</title><rect x="1175.9" y="1173" width="0.2" height="15.0" fill="rgb(245,80,19)" rx="2" ry="2" />
<text  x="1178.94" y="1183.5" ></text>
</g>
<g >
<title>keyDecRef (1,931,306 samples, 0.01%)</title><rect x="238.8" y="1509" width="0.1" height="15.0" fill="rgb(238,76,51)" rx="2" ry="2" />
<text  x="241.77" y="1519.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (76,556,513 samples, 0.39%)</title><rect x="1151.5" y="453" width="4.6" height="15.0" fill="rgb(228,197,28)" rx="2" ry="2" />
<text  x="1154.48" y="463.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (3,385,525,218 samples, 17.23%)</title><rect x="965.8" y="1093" width="203.4" height="15.0" fill="rgb(238,22,1)" rx="2" ry="2" />
<text  x="968.81" y="1103.5" >yanlr::YAML::pairs()</text>
</g>
<g >
<title>yanlr::YAML::pairs() (11,785,998,218 samples, 59.99%)</title><rect x="480.5" y="1413" width="707.9" height="15.0" fill="rgb(229,154,44)" rx="2" ry="2" />
<text  x="483.51" y="1423.5" >yanlr::YAML::pairs()</text>
</g>
<g >
<title>keySetMeta (9,878,907 samples, 0.05%)</title><rect x="240.0" y="1493" width="0.6" height="15.0" fill="rgb(223,169,21)" rx="2" ry="2" />
<text  x="243.02" y="1503.5" ></text>
</g>
<g >
<title>keySetString (27,616,312 samples, 0.14%)</title><rect x="239.0" y="1509" width="1.6" height="15.0" fill="rgb(244,99,49)" rx="2" ry="2" />
<text  x="241.96" y="1519.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (2,236,028 samples, 0.01%)</title><rect x="1163.5" y="917" width="0.2" height="15.0" fill="rgb(229,146,48)" rx="2" ry="2" />
<text  x="1166.53" y="927.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanPlainScalar() (2,483,820 samples, 0.01%)</title><rect x="1168.8" y="1045" width="0.1" height="15.0" fill="rgb(252,71,41)" rx="2" ry="2" />
<text  x="1171.79" y="1055.5" ></text>
</g>
<g >
<title>yanlr::YAML::value() (1,749,055 samples, 0.01%)</title><rect x="1160.6" y="853" width="0.1" height="15.0" fill="rgb(239,49,48)" rx="2" ry="2" />
<text  x="1163.56" y="863.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (5,452,568 samples, 0.03%)</title><rect x="1155.4" y="133" width="0.4" height="15.0" fill="rgb(205,155,42)" rx="2" ry="2" />
<text  x="1158.42" y="143.5" ></text>
</g>
<g >
<title>yanlr::YAML::value() (5,452,587 samples, 0.03%)</title><rect x="1180.9" y="1301" width="0.4" height="15.0" fill="rgb(206,195,54)" rx="2" ry="2" />
<text  x="1183.94" y="1311.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (15,174,261,725 samples, 77.24%)</title><rect x="277.0" y="1509" width="911.4" height="15.0" fill="rgb(222,198,47)" rx="2" ry="2" />
<text  x="279.99" y="1519.5" >yanlr::YAML::child()</text>
</g>
<g >
<title>yanlr::YAML::key() (13,960,163 samples, 0.07%)</title><rect x="1166.6" y="1061" width="0.8" height="15.0" fill="rgb(238,102,2)" rx="2" ry="2" />
<text  x="1169.60" y="1071.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;yanlr::YAML::scalar()::$_4&gt;::_M_manager(std::_Any_data&amp;, std::_Any_data const&amp;, std::_Manager_operation) (1,787,705 samples, 0.01%)</title><rect x="1165.1" y="965" width="0.1" height="15.0" fill="rgb(214,148,35)" rx="2" ry="2" />
<text  x="1168.05" y="975.5" ></text>
</g>
<g >
<title>yanlr::YAML::key() (14,973,905 samples, 0.08%)</title><rect x="1164.3" y="997" width="0.9" height="15.0" fill="rgb(249,142,51)" rx="2" ry="2" />
<text  x="1167.26" y="1007.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (6,378,259 samples, 0.03%)</title><rect x="1184.3" y="1301" width="0.3" height="15.0" fill="rgb(207,205,19)" rx="2" ry="2" />
<text  x="1187.25" y="1311.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (23,037,766 samples, 0.12%)</title><rect x="1154.5" y="309" width="1.4" height="15.0" fill="rgb(254,139,49)" rx="2" ry="2" />
<text  x="1157.47" y="319.5" ></text>
</g>
<g >
<title>yanlr::YAML::map() (500,126,077 samples, 2.55%)</title><rect x="1128.0" y="725" width="30.0" height="15.0" fill="rgb(239,127,36)" rx="2" ry="2" />
<text  x="1130.95" y="735.5" >ya..</text>
</g>
<g >
<title>yanlr::YAML::pairs() (2,930,670 samples, 0.01%)</title><rect x="1155.6" y="69" width="0.1" height="15.0" fill="rgb(247,214,29)" rx="2" ry="2" />
<text  x="1158.57" y="79.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (10,610,304,222 samples, 54.01%)</title><rect x="548.4" y="1381" width="637.3" height="15.0" fill="rgb(235,91,5)" rx="2" ry="2" />
<text  x="551.40" y="1391.5" >yanlr::YAML::child()</text>
</g>
<g >
<title>yanlr::YAML::scalar() (1,897,279 samples, 0.01%)</title><rect x="1181.2" y="1285" width="0.1" height="15.0" fill="rgb(208,26,7)" rx="2" ry="2" />
<text  x="1184.15" y="1295.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (3,157,873,044 samples, 16.07%)</title><rect x="979.5" y="1077" width="189.7" height="15.0" fill="rgb(210,84,36)" rx="2" ry="2" />
<text  x="982.48" y="1087.5" >yanlr::YAML::pair()</text>
</g>
<g >
<title>yanlr::YAMLLexer::scanSingleQuotedScalar() (2,655,754 samples, 0.01%)</title><rect x="1176.4" y="1173" width="0.1" height="15.0" fill="rgb(248,107,54)" rx="2" ry="2" />
<text  x="1179.37" y="1183.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (791,960,361 samples, 4.03%)</title><rect x="1111.7" y="805" width="47.6" height="15.0" fill="rgb(227,210,46)" rx="2" ry="2" />
<text  x="1114.75" y="815.5" >yanl..</text>
</g>
<g >
<title>yanlr::YAML::child() (12,915,288,338 samples, 65.74%)</title><rect x="412.7" y="1445" width="775.7" height="15.0" fill="rgb(252,59,40)" rx="2" ry="2" />
<text  x="415.68" y="1455.5" >yanlr::YAML::child()</text>
</g>
<g >
<title>yanlr::YAML::scalar() (2,819,350 samples, 0.01%)</title><rect x="1159.5" y="789" width="0.2" height="15.0" fill="rgb(221,19,13)" rx="2" ry="2" />
<text  x="1162.53" y="799.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (2,515,762,587 samples, 12.81%)</title><rect x="1015.2" y="1029" width="151.1" height="15.0" fill="rgb(253,193,11)" rx="2" ry="2" />
<text  x="1018.22" y="1039.5" >yanlr::YAML::pairs()</text>
</g>
<g >
<title>yanlr::YAML::pair() (13,480,058,944 samples, 68.62%)</title><rect x="378.8" y="1461" width="809.6" height="15.0" fill="rgb(245,59,36)" rx="2" ry="2" />
<text  x="381.76" y="1471.5" >yanlr::YAML::pair()</text>
</g>
<g >
<title>yanlr::YAML::value() (3,957,560 samples, 0.02%)</title><rect x="1162.0" y="917" width="0.3" height="15.0" fill="rgb(214,90,54)" rx="2" ry="2" />
<text  x="1165.04" y="927.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (3,955,460 samples, 0.02%)</title><rect x="1158.9" y="725" width="0.2" height="15.0" fill="rgb(252,215,18)" rx="2" ry="2" />
<text  x="1161.86" y="735.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::fetchTokens() (2,399,593 samples, 0.01%)</title><rect x="1168.5" y="1045" width="0.2" height="15.0" fill="rgb(223,209,22)" rx="2" ry="2" />
<text  x="1171.53" y="1055.5" ></text>
</g>
<g >
<title>thread_70 (19,645,394,413 samples, 100.00%)</title><rect x="10.0" y="1573" width="1180.0" height="15.0" fill="rgb(254,146,7)" rx="2" ry="2" />
<text  x="13.00" y="1583.5" >thread_70</text>
</g>
<g >
<title>elektraMalloc (13,610,199 samples, 0.07%)</title><rect x="210.2" y="1477" width="0.9" height="15.0" fill="rgb(239,217,10)" rx="2" ry="2" />
<text  x="213.23" y="1487.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::scanToNextToken() (3,224,362 samples, 0.02%)</title><rect x="1171.8" y="1093" width="0.2" height="15.0" fill="rgb(240,209,7)" rx="2" ry="2" />
<text  x="1174.82" y="1103.5" ></text>
</g>
<g >
<title>yanlr::YAML::pair() (7,124,980,365 samples, 36.27%)</title><rect x="752.9" y="1269" width="428.0" height="15.0" fill="rgb(247,22,24)" rx="2" ry="2" />
<text  x="755.90" y="1279.5" >yanlr::YAML::pair()</text>
</g>
<g >
<title>ksDup (6,690,255 samples, 0.03%)</title><rect x="242.5" y="1509" width="0.4" height="15.0" fill="rgb(223,157,49)" rx="2" ry="2" />
<text  x="245.48" y="1519.5" ></text>
</g>
<g >
<title>yanlr::YAML::pairs() (1,337,546,773 samples, 6.81%)</title><rect x="1081.7" y="901" width="80.3" height="15.0" fill="rgb(214,74,54)" rx="2" ry="2" />
<text  x="1084.70" y="911.5" >yanlr::YA..</text>
</g>
<g >
<title>yanlr::YAML::key() (2,556,159 samples, 0.01%)</title><rect x="1157.3" y="677" width="0.2" height="15.0" fill="rgb(234,191,15)" rx="2" ry="2" />
<text  x="1160.30" y="687.5" ></text>
</g>
<g >
<title>yanlr::YAML::scalar() (10,041,501 samples, 0.05%)</title><rect x="1177.8" y="1237" width="0.6" height="15.0" fill="rgb(252,137,22)" rx="2" ry="2" />
<text  x="1180.82" y="1247.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (28,607,368 samples, 0.15%)</title><rect x="1167.4" y="1061" width="1.8" height="15.0" fill="rgb(252,191,31)" rx="2" ry="2" />
<text  x="1170.44" y="1071.5" ></text>
</g>
<g >
<title>yanlr::YAML::child() (3,936,415 samples, 0.02%)</title><rect x="1155.5" y="101" width="0.2" height="15.0" fill="rgb(208,190,0)" rx="2" ry="2" />
<text  x="1158.51" y="111.5" ></text>
</g>
<g >
<title>yanlr::YAMLLexer::nextToken() (37,040,271 samples, 0.19%)</title><rect x="1170.3" y="1125" width="2.2" height="15.0" fill="rgb(206,22,51)" rx="2" ry="2" />
<text  x="1173.28" y="1135.5" ></text>
</g>
</g>
</svg>
